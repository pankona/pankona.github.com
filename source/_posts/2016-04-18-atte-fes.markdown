---
layout: post
title: "atte fes@mercari 参加してきました"
date: 2016-04-18 19:34:12 +0900
comments: true
categories: その他
---

[WIP] 書き途中。メモ

[attefes](/images/attefes/0.jpg)
[attefes](/images/attefes/1.jpg)
[attefes](/images/attefes/2.jpg)
[attefes](/images/attefes/3.jpg)
[attefes](/images/attefes/4.jpg)
[attefes](/images/attefes/5.jpg)
[attefes](/images/attefes/6.jpg)
[attefes](/images/attefes/7.jpg)
[attefes](/images/attefes/8.jpg)
[attefes](/images/attefes/9.jpg)

* GAE/Go の話
* データベースは各リージョンにひとつ
  * 取引が国をまたぐことはないため
  * グローバルでひとつにしたい

* ソウゾウ
  * メルカリではないので技術選定が自由だった。LAMPでないもの。
  * 「3年後にもエンジニアにとって魅力的な場所であるためには？」

* Google Cloud Platform
  * Google のサポート体制が厚い
  * エンジニアの多くがプロダクトの開発に集中できる環境

* Golang 選んだ理由？
  * 初速は LL に劣りがち。長い目で見ると生産性高いと感じた。
  * 型はいいぞ
  * チーム開発のしやすさ (周辺ツール)
  * 変数名でレビューのときにもめない
  * go doc 自動更新、API を使う人はそこを見ろ、で終了にする。
    * go doc の有効な利用例である

* GAE
  * 理想的な blue / green デプロイ ★
  * GAEのインスタンスは 200ms で立ち上がる
  * オートスケールがすばらしい
  * トレース自動で取得、時間がかかってる部分とかわかっちゃう
* DataStore
  * 伝統的な RDB の場合、大規模になると本来の持ち味が生かせなくなる
    * 異なるDBテーブルとのトランザクションができない、JOINが限定的、等。
  * NoSQL データベース "DataStore"

* RDB? NoSQL?
  * Gmail、Youtube (BigTable)、Twitter なんかも NoSQL 使ってるので実績は十分。
  * グローバルでかつ大規模なら選ぶしかない、という選択。

* DataStore よいところ
  * 極めて高いスケーラビリティ
  * 1件でも10億件でも取得と追加の速度が劣化しない
  * 並列書き込み、同一エンティティでなければ制限なし
* DataStore RDBのパターンをそのまま当てはめることはできない

## 設計方針

* GAE へのロックイン
  * ビジネスロジックを GAE に依存しないようにして、いざというときに切り替えられるように
* Go の考え方に従う

* GAE/Go 推し！

## 質疑応答

* Q. Parse の例。Google に依存することについて
* A. Google がだめになるならうちもだめだろう、という思い切り。

* Q. ダウンタイムは気になる？
* A. ダウンしたことない。Google 社内でもかなり綿密にダウンに対する対策は取られているらしい。

* Q. Go言語はどう？
* A. Go素人揃いだった。Goのエキスパートはいたが助けを求めなかった。
未経験者だけでも立ち上げられるかどうかというトライアル。
ちゃんと作れたので、、、リリースすることができるレベルまではすんなり習得できるかと。

* Q. チーム開発のしやすさについて
* A. atte ではエンジニア 10人くらい。iOS 5人。やり取りは go doc ベース。

* Q. モノリポジトリいたる過程
* A. メルカリではけっこう分かれてた。色々問題あった。API 変更の影響がわかりにくい。
Facebook でもリポジトリは一個。Git だと遅いので Marcurial 改造してたり。Google も一個。

hatakenokakashi: goとswiftは似てるそう。swiftエンジニアがgoのスイスイ読めたそう。型の書き方が似ているそう。 #attefes |08:15 PM Apr 18, 2016|

## アッテ開発の技術 Swift と RxSwift

大庭慎一郎さん

* iOS 8 以降にする理由
  * シェアの問題。あと Carthage が使いたかった。
* Swift を採用する理由
  * 流用できる資産がなかった
  * Swift でないとできない色々 (Optional とか)
  * akio0911: なぜSwiftか？ → 人材募集効果  #attefes |08:28 PM Apr 18, 2016|
* JSONRPCKit

* リアクティブプログラミング
  * akio0911: リアクティブプログラミングについては、この記事が分かりやすかったです  【翻訳】あなたが求めていたリアクティブプログラミング入門 - ninjinkun's diary http://ninjinkun.hatenablog.com/entry/introrxja  #attefes |08:31 PM Apr 18, 2016|
  * sassymanyuichi: リアクティブプログラミングしてると、viewDidLoadだのviewDidAppearだの考えないでいいから忘れるんだろうなーｗ #attefes |08:34 PM Apr 18, 2016|
  * 学習コストたかし
  * MVVM。設計に大きく影響。
  * ライブラリが巨大。
  * 頼りきっているとプログラミング能力が下がる？
  * y_matsuwitter: RT @tutuming: ほぉ、こんあんおあるのか http://rxmarbles.com/ rx の図示を集めたサイト #attefes |08:45 PM Apr 18, 2016|

### 質疑応答

* Q. みかんっていうアプリを作っている人。Rx の取っ掛かり？
* A. 部分的に採用していくこともできる。
  * hatakenokakashi: 質問「Rxはどこから手をいれればいいですか？」 ->データバインディングから始めるといい #attefes |08:47 PM Apr 18, 2016|

## アッテ iOS の設計と開発フローの変遷

石川洋資 さん (ishkawa)
* パワー感じる

### 同じ構造の実装の一元化

* よくある同じ構造 ページネーション、フォームのバリデーション 
  * MVVM で同じ構造を担当する
  * ページネーションでは、共通するGenericな部分+型スペシフィックな部分は型パラメータもらって作る
  * 高速、安全

### キャッシュ戦略の変遷

* API クライアント。キャッシュをどうとるかは非常に重要。
* Realm。何もかも Realm のオブジェクトになってしまう。
* Realm と LRU キャッシュの使い分け、サーバに届いていないデータは…
  * 送信中のメッセージ・コメント
  * 入力中のフォーム
  * これらは Realm へ

### 自動デプロイの話

* Travis CI 使ってる
  * agvtool でビルドを振る。Xcodeに付随。
  * 手元でのアーカイブはしない。
  * DeployGate (dev) と TestFlight (prod) にデプロイ
  * QAが通ればそのまま審査へ
  * CI 時間は 7分くらい 
  * 病気で倒れても誰でもデプロイできる
  * tenntenn: ビルドと申請作業が属人化しやすいよなぁ #attefes |09:08 PM Apr 18, 2016|




