<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: その他 | make clean; make]]></title>
  <link href="http://pankona.github.io/blog/categories/sofalseta/atom.xml" rel="self"/>
  <link href="http://pankona.github.io/"/>
  <updated>2016-11-08T16:35:51+09:00</updated>
  <id>http://pankona.github.io/</id>
  <author>
    <name><![CDATA[pankona]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Atte Fes@mercari]]></title>
    <link href="http://pankona.github.io/blog/2016/04/18/atte-fes/"/>
    <updated>2016-04-18T19:34:12+09:00</updated>
    <id>http://pankona.github.io/blog/2016/04/18/atte-fes</id>
    <content type="html"><![CDATA[<p><img src="/images/attefes/title.jpg" alt="attefes"></p>

<p>2016.04.18 に、六本木は森タワーのメルカリさん宅にて、atte fes が行われました。<br>
<a href="http://tech.mercari.com/entry/2016/04/20/130620">アッテの開発技術をお伝えする atte FeS【Go・Swift開発編】を開催しました - Mercari Engineering Blog</a><br>
本イベントにブログ枠にて参加させていただきましたので、ひとつそのレポートをば、したためます。</p>

<p>発表時に用いられた資料は、↑のリンク先にアップしていただいているので、参照されたし。<br>
ちなみに、冒頭の画像は会場でいただいたデカールです。ねこかわいい。</p>

<h2 id="最初にビールと軽食で乾杯">最初にビールと軽食で乾杯</h2>

<p>いきなり技術的な話題ではないところからなんですが、実にシャレオツだったビールブースにふれないわけにはいかない。</p>

<p><img src="/images/attefes/0.jpg" alt="attefes"><br>
図1. 三種類のビールが提供されている。しかも缶じゃない。感動。</p>

<p><img src="/images/attefes/1.jpg" alt="attefes"><br>
図2. 軽食が提供されている。</p>

<p>ビールは3種類とも一杯ずついただきましたが、とても美味でございました。<br>
また夕飯食べずに駆けつけたものだったので、普通に空腹でありました。軽食もいただけて良かった！<br>
おかげさまで集中して発表に耳を傾けることができました。ありがとうございました。</p>

<p><img src="/images/attefes/2.jpg" alt="attefes"><br>
図3. 司会の方の音頭で乾杯。</p>

<h2 id="アッテ開発の技術：golang-と-google-cloud-platform-(鶴岡達也さん)">アッテ開発の技術：<br>Golang と Google Cloud Platform (鶴岡達也さん)</h2>

<p>さて、発表内容について。</p>

<p><img src="/images/attefes/3.jpg" alt="attefes"><br>
図4. 鶴岡さん</p>

<p>ひとつめは鶴岡達也さんによる「Golang と Google Cloud Platform」。</p>

<p>発表の具体的な内容は実際に資料をご覧いただければ分かると思いますので、<br>
本記事では私が印象に残った箇所について触れていくことにします。</p>

<h3 id="なぜ-web-アプリ開発に-go/gae-を採用したか？">なぜ Web アプリ開発に Go/GAE を採用したか？</h3>

<p>さまざま理由があったようですが、個人的には、<br>
<strong>「3年後にもエンジニアにとって魅力的な場所であるため」</strong> に、多様性と技術の開拓の意味もふくめての採用であったというのが印象的でした。<br>
そういうふうな文化があると、エンジニアにとって満足感が高い職場になっていくんじゃないかなー、等と。<br>
とてもいいと思いました。ええ、弊社でもぜひそうしていきたい…。</p>

<h3 id="go言語はチームで開発しやすい">Go言語はチームで開発しやすい</h3>

<p>私も個人的にちょいちょい Go 言語を触りますが、ほんとに周辺ツールの充実っぷりが凄まじい。<br>
lint、コードフォーマッタ、変数名には Go 言語公式のポリシーが存在する、等。<br>
チーム開発に採用すれば、やれインデントが〜とか、インポートの順番が〜、とかをソースレビューに持ち込むこともなくなる。<br>
そういう点も学習コストを下げるのに役立っているかな。Go 言語、私もオススメです。</p>

<h3 id="godoc-を有効に使う">GoDoc を有効に使う</h3>

<p>GoDoc は概ね常に最新に保っているとのことで、つまり、<br>
「API を使いたいひとはとりあえず GoDoc 見て」で済んでいる、らしいです。<br>
チームで開発しやすい、効率化という面で GoDoc を有効に使えている例かな、と。<br>
ドキュメントをおざなりにしないところ、素敵です。<br>
またこういうドキュメンテーションのためのツールが提供されているのも Go 言語のいいところ。<br>
Go 言語、私もオススメです。</p>

<h3 id="gae-のインスタンスは-200-ms-で立ち上がる">GAE のインスタンスは 200 ms で立ち上がる</h3>

<p>速い！この速さはオートスケール時にとっても活きてくる模様。<br>
アクセス過多でスパイクしてもあっとうい間に平穏を取り戻す図は、私の心にも平穏と興奮を与えるものでありました。</p>

<h3 id="その他の話題、rdb-vs-nosql、datastore-の良いところ、等">その他の話題、RDB vs NoSQL、DataStore の良いところ、等</h3>

<p>他にも興味深いトピックについて話されていました。<br>
ぜひ、スライドを直に見ていただければと。</p>

<h2 id="アッテ開発の技術：swift-と-rxswift-(大庭慎一郎さん)">アッテ開発の技術：<br>Swift と RxSwift (大庭慎一郎さん)</h2>

<p><img src="/images/attefes/4.jpg" alt="attefes"><br>
図5. 大庭さん</p>

<p>正直に言うと Reactive Programming というものがほぼ分かってない私ですが、<br>
発表は非常に興味深く聞かせていただきました。Reactive Programming ええな！</p>

<h3 id="swift-の採用を決めた経緯">Swift の採用を決めた経緯</h3>

<p>Swift を採用した経緯について。そもそも流用する資産がなかったとのことで、<br>
だったら色々機能の豊富な Swift にしましょうよ、ということだったと思います。</p>

<p>Objective-C は、それはそれで今まで蓄えられたノウハウが Web 上に豊富に転がっていたりして、いわゆる「ハマりにくさ」では Swift より上のような気はする。そういう意味では Objective-C にも良いところはあるだろう。<br>
とはいえ、Swift と Objective-C、どっち採用したらテンションあがるかと言われれば、やはり Swift であるかなと。3年後もエンジニアにとって魅力的な場所を醸造しているひとつかもしれない、等と思いつつ。</p>

<h3 id="リアクティブプログラミングに頼るとプログラミング能力が下がる？">リアクティブプログラミングに頼るとプログラミング能力が下がる？</h3>

<p>プログラミング能力が下がるは言い過ぎかも？<br>
スライド上のサンプルコードは短く完結にわかりやすく書かれていて、いったん慣れてしまったら辞められない的なものを感じた。<br>
なるほど、馴染んできたら普通のプログラミング (？) のやり方忘れちゃうかもしれないですね。</p>

<p>とはいえ学習コストは高い模様。<br>
質疑応答では「急に全部ではなく、部分的に採用していくこともできる」と。<br>
データバインディングから始めるのがやりやすいのではないか、と仰っておられました。</p>

<h3 id="リアクティブプログラミング-参考サイト">リアクティブプログラミング 参考サイト</h3>

<p>スライド中でも触れられていますが、リアクティブプログラミングについては以下のサイトが理解の助けになったとのこと。<br>
<a href="http://ninjinkun.hatenablog.com/entry/introrxja">【翻訳】あなたが求めていたリアクティブプログラミング入門 - ninjinkun&#39;s diary</a></p>

<p>以下のページでは、Reactive な動き (Stream) を図で理解できるようになっています。<br>
<a href="http://rxmarbles.com/">RxMarbles - Interactive diagrams of Rx Observables</a></p>

<h2 id="アッテ開発の技術：アッテ-ios-の設計と開発フローの変遷-(石川洋資さん)">アッテ開発の技術：<br>アッテ iOS の設計と開発フローの変遷 (石川洋資さん)</h2>

<p><img src="/images/attefes/7.jpg" alt="attefes"><br>
図6. 石川さん</p>

<h3 id="同じ構造の実装の一元化">同じ構造の実装の一元化</h3>

<p>よくある同じ構造のもの、 ページネーション、フォームのバリデーションであるとかの共通化の話。<br>
MVVM でいうところの VM 部分で、共通するGenericな部分 + 型スペシフィックな部分は型パラメータもらって作る、という構造の紹介。<br>
特にページネーションは、10回書いたら7回くらいバグってるくらいのバグを埋め込みやすい部分らしく、<br>
共通化することで、「高速な開発で、かつ安全」な設計に近づくことができたとのこと。</p>

<p>新しい設計を試すのは、場合によっては難しいことだと思う。<br>
つい、いま動いているところは触りたくない、以前作ったものと同じような構造が出てきたら踏襲する、等と<br>
してしまいがちな昨今（ですよね）、飽き足らず、より良いモノ作ろうぜという熱気にあふれている、等と感じておりました。<br>
素敵だ。</p>

<h3 id="自動デプロイの話">自動デプロイの話</h3>

<p>ご多分にもれずというか、やはり iOS アプリも自動ビルド/自動デプロイをなさっている模様。<br>
構成要素としては、<br>
* Travis CI (CI 時間は7分くらい)<br>
* agvtool でビルド番号を振る (Xcodeに付随)。<br>
* DeployGate (dev) と TestFlight (prod) にデプロイ</p>

<p>また、その他の作法として、<br>
* 手元でのアーカイブはしない。<br>
* QAが通ればそのまま審査へ</p>

<p>というのが紹介されていました。</p>

<p>ビルドとかデプロイ、あと審査もだと思いますが、ものすごく属人化しがちな部分であると思う。<br>
<strong>「病気で倒れても誰でもデプロイできる」</strong> と仰っていましたが、これって本当に大事なこと。<br>
作業をひとにロックインしない工夫をしていかないとね。属人化は不幸の始まり。</p>

<p>ところで CI に掛かる時間が7分って結構早いような気がしている。<br>
早さ、特に CI とかそういう常日頃から何度も繰り返し行われる事柄の早さは重要。</p>

<p>何も考えずにそこそこの規模の iOS アプリビルドしたら、結構時間かかっちゃうと思うんだよね。それこそ10分くらい余裕で。<br>
さらっと7分って言っていましたが、ここにはきっと色々な工夫がなされているんだと想像します。</p>

<h2 id="その後">その後</h2>

<p><img src="/images/attefes/8.jpg" alt="attefes"><br>
図7. 懇親会。みな思い思いの方を捕まえては話し込む。</p>

<p><img src="/images/attefes/9.jpg" alt="attefes"><br>
図8. 懇親会。運営おつかれさまでした。</p>

<h2 id="おわりに">おわりに</h2>

<p>Mercari からスピンアウト (?) した SOUZOH という組織は、なんというか、<br>
新しいやり方をどんどん取り入れていて、エンジニア的にはテンションあがる環境であるという印象でした。<br>
それで実際うまいことやれているっていうのは、なお凄いことかな。</p>

<p>そんな感じで、おいしいビールをいただきながら学ばせていただいた atte fes でございました。オススメは Tokyo White。<br>
運営の方々、登壇の方々におかれましては、大変おつかれさまでございました！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Review Best Practices を日本語訳した]]></title>
    <link href="http://pankona.github.io/blog/2015/07/31/code-review-best-practices-jp-translation/"/>
    <updated>2015-07-31T19:36:04+09:00</updated>
    <id>http://pankona.github.io/blog/2015/07/31/code-review-best-practices-jp-translation</id>
    <content type="html"><![CDATA[<p><a href="http://kevinlondon.com/2015/05/05/code-review-best-practices.html">Code Review Best Practices - Kevin London&#39;s blog</a> の日本語訳を作成した。</p>

<p><a href="http://pankona.github.io/CodeReviewBestPractices_JP_Translation/">Code Review Best Practices 日本語翻訳</a></p>

<p>コードレビューのやり方に関しての記事であるが、分かりやすいしフムフムと感じる内容だったため、<br>
本人に許可をいただいて、翻訳、掲載をさせていただいた。<br>
ありがとう、ケビンさん。</p>

<p>おかしい点、改善点にお気づきの方がいらっしゃれば、issue登録、pull request、なんでもいいので連絡いただけると嬉しい。<br>
リポジトリは<a href="https://github.com/pankona/CodeReviewBestPractices_JP_Translation">こちら</a></p>

<p>実は<a href="http://postd.cc/code-review-best-practices/">POSTDに同じ記事を訳したもの</a>があることが分かったのだが、、、<br>
まあいくつあってもいいかな、等と思いつつ。ちなみに訳はほとんど同じだった。</p>

<p>この手のものは英語のままでいいと思う気持ちがある反面、<br>
やっぱり日本人は日本語のほうが速く読める人が多いだろうし、一定の価値はあるかな、等と思うところである。</p>

<p>記事の中で印象深かったのは、*Compliment / reinforce good practices* の部分である。</p>

<p>平たく言えば、コードレビューで見つけた良いところを褒めていけ、という内容。<br>
コードレビューではとかく指摘を探すことに終始しがちであるが、<br>
確かに、褒めるというかイイネというか＋１というか、をしていくことで、<br>
いい空気、もっといいコード書いてやろう的なモチベーションアップ、とか そういう効果もあるんじゃないかと思ったりもする。<br>
ギスギスしがちなコードレビューの現場にはオススメ。私もやっていきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[月間300ヒットを達成していた]]></title>
    <link href="http://pankona.github.io/blog/2015/01/28/300hot-per-month/"/>
    <updated>2015-01-28T21:44:18+09:00</updated>
    <id>http://pankona.github.io/blog/2015/01/28/300hot-per-month</id>
    <content type="html"><![CDATA[<p>12月のことであるが、実は月間300ヒットを達成していた。<br>
うち250ヒットは自分の手によるもの、、、とかそういうことではなく、<br>
概ね自分以外の方々によって、月間300ヒットを達成できたのである。<br>
300ヒット。たかが300ヒット。されど300ヒット。 一日平均10人。</p>

<p>これからもほそぼそ、ぼちぼち、書いていこうと思う。<br>
学んだことをアウトプットするのが大事だと誰か偉い人も言っておった。私もそう思う。<br>
書いたことによって、誰かひとりでも何かの助けになればと願いつつ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Japanの検索にgithubがヒットしないかと思ったがそんなことはなかった]]></title>
    <link href="http://pankona.github.io/blog/2014/05/19/about-google-search/"/>
    <updated>2014-05-19T21:21:34+09:00</updated>
    <id>http://pankona.github.io/blog/2014/05/19/about-google-search</id>
    <content type="html"><![CDATA[<h2 id="自分のページがgoogle検索にヒットしない理由">自分のページがGoogle検索にヒットしない理由</h2>

<p>なかなか自分のページ（ここのブログのこと）がGoogle検索に引っかからないので、<br>
いや、大層なことを書いているわけでもないから引っかからなくても怒ったりはしないが、<br>
いやでもなんで引っかからないんだろう、と思って調査をしていたところ、</p>

<h3 id="githubのリポジトリはgoogle日本の検索に引っかからない">GithubのリポジトリはGoogle日本の検索に引っかからない</h3>

<p>といった記事を見つけた。ほんまかいな？<br>
もしかしてそのせいでうちのページはGoogleに引っかからないんじゃああるまいか？<br>
（Github pagesを使って公開しているページなので）</p>

<p>等と考えつつ、調査を続行していったところ、、、</p>

<h3 id="結論からすると、githubのリポジトリはgoogle日本の検索にちゃんと引っかかる。">結論からすると、GithubのリポジトリはGoogle日本の検索にちゃんと引っかかる。</h3>

<p>ただし条件がある模様。それは（おそらく）、</p>

<p><strong>ページ（リポジトリの場合はREADMEかな？）に日本語が含まれていること</strong></p>

<p>つまり、Google日本の検索に引っかからない、というよりは、<br>
<strong>&quot;日本語のページを検索&quot;</strong>に引っかからない、ということである模様。<br>
全編英語で書いてたら英語のページと判断して、&quot;日本語のページを検索&quot;には載せない、ってことかなー。<br>
そして、Google日本の検索は、おそらくデフォルトは&quot;日本語のページを検索&quot;になってる。という話。</p>

<p>加えて、GithubのリポジトリのREADMEなんかは、英語だけで書かれているケースが多い。<br>
だからGoogle日本を使ってそのまま検索をしていると、Githubのページがあんまり出てこないという現象が。</p>

<p>だので、英語だけで書かれたGithubのページも、検索オプションで言語に依らない検索にしてあげれば、Google日本の検索でも出てきます。</p>

<h3 id="じゃあ日本の人にもリポジトリにリーチしてもらうにはどうするか？">じゃあ日本の人にもリポジトリにリーチしてもらうにはどうするか？</h3>

<p>自分のGithubのリポジトリに日本人を呼び込みたい！と思ったら、READMEに日本語をちょっと混ぜてあげればリーチできる人が増えるかも？<br>
と思っているがどうか。たぶん、おそらく、きっと、効果あると思われる。つまり自信ない。<br>
自分のリポジトリ使って実験してみます。そのうち調査結果を書きます。</p>
]]></content>
  </entry>
  
</feed>
