name: generate_site_and_deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: '0.141.0'
      SASS_VERSION: '1.80.3'
      DART_SASS_SHA_LINUX: '7c933edbad0a7d389192c5b79393485c088bd2c4398e32f5754c32af006a9ffd'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache hugo resources
        uses: actions/cache@v4
        with:
          path: /home/runner/.cache/hugo_cache
          key: ${{ runner.os }}-hugo-${{ env.HUGO_VERSION }}-hugomod-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-hugo-${{ env.HUGO_VERSION }}-hugomod-
      - name: Set up Go # Required go env because of hugo module depends on it.
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache-dependency-path: 'go.sum'
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Install dart-sass # We can remove this step if all themes and modules are not using Sass
        # Workaround to avoid slow methods such as `snap install`. See GH-276
        run: |
          echo "Install Dart Sass version ${SASS_VERSION} ..."
          curl -LJO "https://github.com/sass/dart-sass/releases/download/${SASS_VERSION}/dart-sass-${SASS_VERSION}-linux-x64.tar.gz";
          echo "${DART_SASS_SHA_LINUX}  dart-sass-${SASS_VERSION}-linux-x64.tar.gz" | sha256sum -c;
          tar -xvf "dart-sass-${SASS_VERSION}-linux-x64.tar.gz";
          echo "$GOBIN"
          echo "$GITHUB_WORKSPACE/dart-sass/" >> $GITHUB_PATH
      - name: Make sure dependency versions
        run: |
          hugo version
          sass --version
      - name: Install Node.js dependencies
        run: '[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true'
      - name: Build with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo --panicOnWarning \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy-staging:
    permissions:
      checks: write
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository }}
    steps:
      - uses: actions/checkout@v4
      - name: Download build assets
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh run download --repo '${{ github.repository }}'
      - name: Extract the downloaded artifact
        run: |
          mkdir public
          tar -xf ./github-pages/artifact.tar -C public
          tree ./public
      - uses: FirebaseExtended/action-hosting-deploy@v0
        # dependabot does not have read permission for secrets
        if: github.actor != 'dependabot[bot]'
        with:
          repoToken: ${{ github.token }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PANKONA_BLOG }}
          projectId: pankona-blog

  deploy-production:
    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      contents: read
      pages: write
      id-token: write
    # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
    # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
    concurrency:
      group: 'pages'
      cancel-in-progress: false
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
