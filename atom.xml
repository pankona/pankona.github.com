<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[make clean; make]]></title>
  <link href="http://pankona.github.io/atom.xml" rel="self"/>
  <link href="http://pankona.github.io/"/>
  <updated>2017-03-12T15:36:17+00:00</updated>
  <id>http://pankona.github.io/</id>
  <author>
    <name><![CDATA[pankona]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[golang.tokyo#4@eureka]]></title>
    <link href="http://pankona.github.io/blog/2017/03/01/golangtokyo-4/"/>
    <updated>2017-03-01T10:31:27+00:00</updated>
    <id>http://pankona.github.io/blog/2017/03/01/golangtokyo-4</id>
    <content type="html"><![CDATA[<p>2017.03.01 に eureka さんにて、golang.tokyo #4 が行われました。</p>

<p><a href="https://golangtokyo.connpass.com/event/50714/">golang.tokyo #4 - connpass</a></p>

<p>今回もまた大盛況で一般参加枠は倍率3倍くらいの抽選となっていましたが、<br>
たまたまブログ枠が空いているところに遭遇してしまったため、またしてもブログ枠として<br>
参加させていただきました。内容をレポートしていきます。</p>

<p>発表内容の詳細は、実際発表に用いられたスライド (上記 connpass のページから辿れます) を参照いただくのが一番良いと思いますので、<br>
本記事ではその他、イベントの雰囲気や私の感想を主にお伝えしていくような体になります。<br>
それではいきます。今回のテーマは <strong>「concurrency」</strong> 。</p>

<hr>

<h1 id="concurrency-for-distributed-web-crawlers-by-puhitaku-さん">Concurrency for distributed Web crawlers by puhitaku さん</h1>

<p><a class="embedly-card" data-card-key="ee29ed4b275e459483a608ca67084559" data-card-controls="0" href="https://speakerdeck.com/puhitaku/concurrency-for-distributed-web-crawlers">Concurrency for distributed Web crawlers</a><br>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script></p>

<p>(↑のカードをクリックでスライドに飛びます。)</p>

<h2 id="appstore-と-google-play-をクロールして欲しい情報を収集するやつ">AppStore と Google Play をクロールして欲しい情報を収集するやつ</h2>

<ul>
<li><p>クロール対象はシングルドメイン。だが対象となるアプリが多い (100k以上) 。</p>

<ul>
<li>同一IPからあんまりひどいことするとバンされたりする&#8230;。</li>
<li>とはいえあんまりちんたらやってるわけにもいかない。24時間以内にクロールし終わる必要がある。</li>
</ul></li>
<li><p>Commander と Crawler</p>

<ul>
<li>AWS EC2 Container Service を使っている。</li>
<li>一日30弱くらいのインスタンスを立ち上げて並列でクローリングする。</li>
</ul></li>
<li><p>1 アプリあたりのクロール時間が見積もれないと困る。</p>

<ul>
<li>1 アプリあたりのクロール速度は割とまちまち。終わるの待ってたらクロール量が安定しない。</li>
<li>一個あたりのクロールを goroutine で行う。</li>
<li>規定時間を設ける。規定時間より超過した場合、終わってなくても次のタスクをスタートさせる。</li>
<li>という戦略で、時間あたりのクロール数を見積もれるという寸法。</li>
</ul></li>
<li><p>落とし穴シリーズ</p>

<ul>
<li>TCPコネクションを使い果たす問題。並列に行われるクロールの数が多すぎると TCP コネクションを使い果たしてしまう…。</li>
<li>この問題は、make(chan int, 100) みたくして、Channel が保持する値の数を制限することで対応。</li>
</ul></li>
</ul>

<hr>

<h1 id="goのスケジューラー実装とハマりポイント-by-niconegoto-さん">Goのスケジューラー実装とハマりポイント by niconegoto さん</h1>

<p><a class="embedly-card" data-card-key="ee29ed4b275e459483a608ca67084559" data-card-controls="0" data-card-type="article-full" href="https://talks.godoc.org/github.com/niconegoto/talks/concurrency.slide#1">Goのスケジューラー実装とハマりポイント</a><br>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script></p>

<p>Goroutine の内部実装について。</p>

<h2 id="goroutine-の実装デザイン">Goroutine の実装デザイン</h2>

<ul>
<li>runtime を読む。</li>
<li><p><a href="https://golang.org/pkg/runtime">https://golang.org/pkg/runtime</a></p></li>
<li><p>M、G、P という文字が頻繁に出てくる。それらの意味は、</p>

<ul>
<li>M &#8230; Machine</li>
<li>G &#8230; Goroutine</li>
<li>P &#8230; Processor</li>
</ul></li>
</ul>

<h2 id="スケジューラーのハマりどころ">スケジューラーのハマりどころ</h2>

<ul>
<li>C 言語の pthread なんかと同じで、goroutine もコンテキストスイッチを考慮する必要がある。</li>
<li><a href="https://morsmachine.dk/go-scheduler">Morsing&#39;s Blog</a> に詳しいこと書いてある。</li>
</ul>

<h1 id="ridge-a-framework-like-gae/go-on-aws-by-fujiwara-さん">Ridge a framework like GAE/Go on AWS by fujiwara さん</h1>

<p><a class="embedly-card" data-card-key="ee29ed4b275e459483a608ca67084559" data-card-controls="0" href="https://speakerdeck.com/fujiwara3/go-on-aws">Ridge - A framework like GAE/Go on AWS</a><br>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script></p>

<p>Go で書いた HTTP Server を AWS Lambda で動かす…！</p>

<h2 id="ridge-の紹介">Ridge の紹介</h2>

<ul>
<li><a href="https://github.com/fujiwara/ridge">Ridge</a></li>
<li>実質、GAE/Go みたいなことを AWS Lambda で実現できる</li>
<li>裏で goroutine を延々動かしておくみたいなことはできない。Lambda はレスポンス返し終わると寝てしまう。

<ul>
<li>次のリクエストが来たら起きて続きの処理が行われていく</li>
</ul></li>
<li><p>頻繁にアクセスがなく、レイテンシ要求がシビアでないようなものに向く</p>

<ul>
<li>サービスが終了したゲームの告知 API とか。POST を受けて JSON を返す、という処理を EC2 使わないで行う。</li>
</ul></li>
<li><p>EC2 使わず、それでいてリクエスト数が多ければスケールする、ということで用途が合えば非常にリーズナブルにできる印象。</p></li>
</ul>

<hr>

<h1 id="ライブコーディング-by-kaneshin-さん">ライブコーディング by kaneshin さん</h1>

<p><img src="http://pankona.github.io/images/golang.tokyo-4/1.jpg" alt="golang.tokyo-4"><br>
写真1. ライブコーディング直前の kaneshin さん</p>

<ul>
<li>tail コマンドを作る&#8230;!</li>
<li><a href="https://gist.github.com/kaneshin/a398720b8e20722a83bc6903e4017435">完成したものはこちら</a></li>
</ul>

<h2 id="ポイント-(と思ったところ)">ポイント (と思ったところ)</h2>

<ul>
<li>kaneshin さんは vim + vim-go プラグインを使って Go を書いている模様。</li>
<li>channel をバッファのように扱っている。</li>
<li>入力を待ち受ける goroutine と、出力を担当する goroutine とで 2 並列。
今回のテーマにあった良い題材であると感じた。</li>
</ul>

<hr>

<h1 id="嫁に怒られずに-go-を書く技術-by-teitei_tk">嫁に怒られずに Go を書く技術 by teitei_tk</h1>

<p><a class="embedly-card" data-card-key="ee29ed4b275e459483a608ca67084559" data-card-controls="0" href="https://speakerdeck.com/teitei/jia-ninu-rarezunigowoshu-kuji-shu">嫁に怒られずにGoを書く技術</a><br>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script></p>

<p>「嫁のため」という免罪符を得て開発していくスタイル</p>

<ul>
<li>LINE に天気予報だったりを投稿する。</li>
<li>つまり生活に役立つというか家内に益があれば良いということ。</li>
<li>夫婦円満を願ってやまない。</li>
</ul>

<hr>

<h1 id="gogland-by-sergey-ignatov-さん">Gogland by Sergey Ignatov さん</h1>

<p><img src="http://pankona.github.io/images/golang.tokyo-4/2.jpg" alt="golang.tokyo-4"><br>
写真2. Gogland の開発者 Sergey Ignatov さん</p>

<p>JetBrains から Sergey Ignatov さんが来てくれて、Gogland の紹介をしてくれたぞ！</p>

<ul>
<li>function の定義に飛んで実装を確認する必要はなく、小窓で出せるような機能がある。便利そう。</li>
<li>引数のサジェストが賢い。ファジーサーチ的に動きつつ、型が合わないものはサジェストされない、等。</li>
<li>保存時に go fmt、 go import する機能も最近対応された。</li>
<li>2017年3月現在は EAP 版だが、年末くらいには EAP が取れて正式版になるような予定らしい。</li>
<li>意見・要望があったら <a href="https://youtrack.jetbrains.com/issues/GO">issue tracker</a> へ！</li>
</ul>

<hr>

<p>ざっくりですが、かいつまんで golang.tokyo 4 回目の様子を紹介いたしました。<br>
休憩時間にはビールも振る舞われたりして、無料でいいんですかという気持ちになります。<br>
いつもありがとうございます。</p>

<p>次回もまた 4 月くらいに実施されるようなので、都合が合えば参加させていただこうかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GNOMEアプリ上で日本語入力できなくなったときの対処メモ]]></title>
    <link href="http://pankona.github.io/blog/2016/12/14/jp-input-on-gnome-app/"/>
    <updated>2016-12-14T02:12:31+00:00</updated>
    <id>http://pankona.github.io/blog/2016/12/14/jp-input-on-gnome-app</id>
    <content type="html"><![CDATA[<p>何が原因かハッキリしていないが、Linux をアップデート (パッケージの更新という意味) したときに<br>
日本語が入力できなくなることがあった。</p>

<p>起きたこととしては、<br>
* firefox 上では日本語入力可能 (direct input と日本語のトグル可能) 。<br>
* Slack、chromium の上では日本語入力できない (direct input のみ可能) 。</p>

<p>環境は、<br>
* Manjaro Linux (2016年12月あたり)<br>
* fcitx を使用<br>
* 日本語入力は mozc</p>

<p>方々ググって対処法を見つけたのでメモ。</p>

<h2 id="dconf-editor-で設定を確認し、必要に応じて修正する">dconf Editor で設定を確認し、必要に応じて修正する</h2>

<p>dconf Editor を開き、以下の設定を確認する。<br>
* <code>/org/gnome/settings-daemon/plugins/xsettings/overrides</code> を参照する<br>
* 値に <code>{&#39;Gtk/IMModule&#39;: &lt;&#39;fcitx&#39;&gt;}</code> が入っているかどうか</p>

<p>コマンドラインから確認する場合は以下のように入力する。<br>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br>
<span class='line-number'>2</span><br>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gsettings get org.gnome.settings-daemon.plugins.xsettings overrides<br>
</span><span class='line'># (期待される出力) {&#39;Gtk/IMModule&#39;: &lt;&#39;fcitx&#39;&gt;}</span></code></pre></td></tr></table></div></figure></p>

<p>入ってなかったら、上記の値をコピペして設定する。<br>
コマンドラインから設定する場合は以下のように入力する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gsettings set org.gnome.settings-daemon.plugins.xsettings overrides "{'Gtk/IMModule':&lt;'fcitx'&gt;}"</span></code></pre></td></tr></table></div></figure>

<p>当方の環境ではこれで日本語入力ができる状態になった。</p>

<h2 id="参考サイト">参考サイト</h2>

<ul>
<li><a href="https://wiki.archlinuxjp.org/index.php/Fcitx#Gnome-Shell">Fcitx - ArchWiki (日本語版)</a>

<ul>
<li>「Ctrl+Space が GTK のプログラムで機能しない」の項を参照。</li>
</ul></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golang.tokyo#2@はてな]]></title>
    <link href="http://pankona.github.io/blog/2016/12/12/golangtokyo-2/"/>
    <updated>2016-12-12T10:24:17+00:00</updated>
    <id>http://pankona.github.io/blog/2016/12/12/golangtokyo-2</id>
    <content type="html"><![CDATA[<p>2016.12.12 に表参道のはてなさんにて、golang.tokyo #2 が行われました。</p>

<p><a href="https://golangtokyo.connpass.com/event/44807/">golang.tokyo #2 - connpass</a></p>

<p>今回もまたブログ枠にて参加させていただきましたので、<br>
その内容をレポートしていきます。</p>

<p>発表内容の詳細はスライド (上記 connpass のページから辿れます) を参照いただくのが一番良いと思います。<br>
本記事ではその他、イベントの雰囲気や私の感想を主にお伝えできればいいかなと思っています。<br>
それでは行きます。</p>

<hr>

<p>今回の golang.tokyo は 2 回目の開催。<br>
今後も色々目論まれているようです。楽しみ。</p>

<p><img src="http://pankona.github.io/images/golang.tokyo-2/02.jpg" alt="golang.tokyo-2"><br>
図1. golang.tokyo について</p>

<p>golang.tokyo 2 回目のテーマは <strong>「テスト」</strong> について。</p>

<hr>

<h1 id="テストしやすいgoコードのデザイン-by-deeeet-さん">テストしやすいGoコードのデザイン by deeeet さん</h1>

<p><a class="embedly-card" data-card-key="ee29ed4b275e459483a608ca67084559" data-card-controls="0" data-card-type="article-full" href="https://talks.godoc.org/github.com/tcnksm/talks/2016/12/golang-tokyo/golang-tokyo.slide#1">テストしやすいGoコードのデザイン</a><br>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script><br>
(↑のカードをクリックでスライドに飛びます。)</p>

<p><img src="http://pankona.github.io/images/golang.tokyo-2/07.jpg" alt="golang.tokyo-2"><br>
図2. 発表中の deeeet さん。</p>

<p>以下、印象に残ったところを抜粋。</p>

<h2 id="deeeet-さんはテストフレームワークを使わない派">deeeet さんはテストフレームワークを使わない派</h2>

<p>テストのフレームワークは使わず、testing パッケージだけで十分であろうとの意見。<br>
これは、フレームワークは「ミニDSL」であって、導入するひとはまだしも、<br>
あとからプロジェクトに入ってくる人は学習する部分が増えてしんどくなってしまう、という一面があるからとのこと。<br>
納得。</p>

<h2 id="テストしやすいコードとは">テストしやすいコードとは</h2>

<p><strong>「Table Driven Test」</strong> がおすすめ。<br>
* 入出力が理解しやすい<br>
* テストケース追加が容易<br>
* 「Table Driven Test に落とし込めるコード」は入出力が明確でテストしやすいコード</p>

<h2 id="テストしにくくなる要素とその対策">テストしにくくなる要素とその対策</h2>

<p>テストしにくくなるというのは「Table Driven Test」がやりにくくなる状況を指す。<br>
→ 入力以外の要素が出力影響を及ぼしてしまう状況。</p>

<ul>
<li>グローバル変数 (暗黙の入力)

<ul>
<li>なるべく関数の引数に入れるようにしてテストしやすくする</li>
<li>もしくは「デフォルトの値」として <strong>のみ</strong> 使う</li>
<li>変わらないかもしれない定数っぽい値もなるべく設定可能にする</li>
<li>環境変数もグローバル変数と同じ</li>
</ul></li>
<li>ユーザーの入力 (コマンドを入力→期待通りに動いたか、のテスト)

<ul>
<li>入力の受取に os.Stdin を暗黙的に使わず io.Reader を使い、テスト時に仮想的な入力を行えるようにする。</li>
<li>入力に対する出力で、Table Driven にすることができるようになる。</li>
</ul></li>
<li>ファイル出力 (ファイル出力された内容が正しいかどうか、のテスト)

<ul>
<li>実際に書いたあとに開き直して中身を確認するのでもテストは可能だが、大量にやろうと思うと遅くなってしまう。</li>
<li>入力のときと考え方は同じで、io.Writer を出力先とし、テスト時はオンメモリのバッファに出力できるようにする。</li>
<li>バッファに出力された内容とその期待結果で、Table Driven することができるようになる。</li>
</ul></li>
</ul>

<h1 id="macherelにおけるgoのエコシステムとかテストとか-by-songmu-さん">MacherelにおけるGoのエコシステムとかテストとか by Songmu さん</h1>

<p><a class="embedly-card" data-card-key="ee29ed4b275e459483a608ca67084559" data-card-controls="0" data-card-image="https://mackerel.io/files/images/brand-assets/screenshot-service.png" data-card-type="article-full" href="http://songmu.github.io/slides/golangtokyo-2/">MackerelにおけるGoのエコシステムとかテストとか</a><br>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script><br>
(↑のカードをクリックでスライドに飛びます。)</p>

<p><img src="http://pankona.github.io/images/golang.tokyo-2/09.jpg" alt="golang.tokyo-2"><br>
図3. 発表中の songmu さん</p>

<h2 id="mackerel-のエコシステム周りの話">Mackerel のエコシステム周りの話</h2>

<ul>
<li>ソースをオープンにしてパッチ受け入れるようにした。

<ul>
<li>ホスト先は GitHub。contribute してもらいやすい。</li>
<li>pull request に対するレビュー体制、CI が必要。</li>
<li>Travis CI、Circle CI を使っている。CI の内容は以下のようなもの。

<ul>
<li>go vet、 golint go test</li>
<li>coverage 計測</li>
<li>cross build 可能か</li>
</ul></li>
</ul></li>
<li>ちなみに Changelog はプルリクエストの情報から自動生成している。</li>
</ul>

<h2 id="ミドルウェアのテスト">ミドルウェアのテスト</h2>

<ul>
<li>実際にテスト時に実行する

<ul>
<li>DB ならばモックせずに実際に DB を立ててデータを入れて確認をする、のような。</li>
<li>モックや interface でのテストでは気づけない部分もあるので、実際にやってテストする。</li>
</ul></li>
</ul>

<hr>

<h1 id="休憩">休憩</h1>

<p>deeeet さん、songmu さんの発表のあと、いったん休憩に。<br>
休憩ではピザとビールが振る舞われまして、はてなさんにスポンサーしていただいたとのこと。<br>
ありがたくいただきました。</p>

<p><img src="http://pankona.github.io/images/golang.tokyo-2/11_rotated.jpg" alt="golang.tokyo-2"><br>
図4. ピザとビールをはてなさんから振る舞っていただく。</p>

<p><img src="http://pankona.github.io/images/golang.tokyo-2/12.jpg" alt="golang.tokyo-2"><br>
図5. 会場遠景。芝生です。</p>

<p><img src="http://pankona.github.io/images/golang.tokyo-2/13.jpg" alt="golang.tokyo-2"><br>
図6. deeeet さんにむらがる Gophers (私もこのあとむらがりました) 。</p>

<p>勉強会の真ん中にこういう親睦会的なノリの時間が設けられるのは珍しいかな？<br>
なんだか新鮮でした。参加者の方とも少しだけお話できたりしました。<br>
勉強会終わってからの親睦会だと参加できないケースが多い私のようなものにとっては、会の真ん中にこういうのやってもらうのもいいかもしれない。</p>

<hr>

<h1 id="ここから-lt-コーナー">ここから LT コーナー</h1>

<p>ピザとビールで温まってきたところで LT 開始。</p>

<h2 id="timakin-さん">timakin さん</h2>

<p><a class="embedly-card" data-card-key="ee29ed4b275e459483a608ca67084559" data-card-controls="0" href="https://speakerdeck.com/timakin/plain-db-import-with-go">Plain db import with Go</a><br>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script></p>

<ul>
<li><a href="https://github.com/timakin/gopli">timakin/gopli</a>

<ul>
<li>開発環境を本番環境に近づけるやつ。本番データをローカルに簡単にもってくる。</li>
</ul></li>
</ul>

<h2 id="osamingo-さん">osamingo さん</h2>

<p><a class="embedly-card" data-card-key="ee29ed4b275e459483a608ca67084559" data-card-controls="0" href="https://speakerdeck.com/osamingo/go-deshi-meru-json-rpc-ru-men">Go で始める JSON-RPC 入門</a><br>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script></p>

<ul>
<li>JSON-RPC！</li>
</ul>

<h2 id="kazuhiratogo-さん">KazuhiraTogo さん</h2>

<p><a class="embedly-card" data-card-key="ee29ed4b275e459483a608ca67084559" data-card-controls="0" href="https://speakerdeck.com/ktogo/continuous-deployment-with-go-on-aws-ecs">Continuous Deployment with Go on AWS ECS</a><br>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script></p>

<ul>
<li>デプロイをとことん自動化した話。</li>
<li>本番とローカルで同じ環境を → Docker を使う。</li>
<li>Circle CI 上の docker は Ubuntu。本番は Alpine。環境の違いが問題に。 → Docker on Docker にして解決した。</li>
</ul>

<hr>

<p>以上の内容でした。せめて雰囲気くらい伝わればいいですが。<br>
いずれの発表もとても内容が濃くて、勉強になりっぱなしでした。感謝。<br>
ひとまず Table Driven Test ですかね。取り入れてなかったのでやってみようか等と思い。</p>

<p>感謝といえば、運営サイドのこと。<br>
ほぼトラブルなしでスムーズに進んだのは、十分に準備してくれていたということだと思います。<br>
だいたいマイクの電池が切れたりスライドがうまく映らなかったり、そういうの対策しようがなくてしょうがないところもあるんですが、<br>
今回に関してはそういうのほぼほぼなくて、というかマイクの音量とか超ちょうど良くて、本当に細かい配慮を感じました。多謝。<br>
他にも、アンケートを集めて次回のネタにしたりしていて (今回のテーマも、前回のアンケートでテストに関することを聞きたいという要望が多かったから、という理由で選んだとのこと)、golang.tokyo 運営すげーなという印象です。すげーな！</p>

<p>次回もまた来年に予定されているようです。楽しみにしています！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux で 無線LAN の USB ドングルを使う]]></title>
    <link href="http://pankona.github.io/blog/2016/11/14/usb-wifi-dongle/"/>
    <updated>2016-11-14T11:14:02+00:00</updated>
    <id>http://pankona.github.io/blog/2016/11/14/usb-wifi-dongle</id>
    <content type="html"><![CDATA[<p>Linux と銘打っておりますが、Manjro で試しています。<br>
本記事は Linux で 無線LAN のドングルを使えるようにした備忘録です。</p>

<h2 id="使ったドングル二種">使ったドングル二種</h2>

<p>訳あって二種類のドングルを使いました。いずれも I-O DATA 製。</p>

<ul>
<li>WN-AC433UM</li>
<li>WN-G150UMK</li>
</ul>

<h2 id="wn-ac433um-編">WN-AC433UM 編</h2>

<p>とりあえずぶっ挿してみたところ、無線LAN デバイスとしては認識されなかった。<br>
つまりデフォルトの Manjro には WN-AC433UM のドライバが入っていなかったということ。<br>
ドライバを入れていく。</p>

<h3 id="wn-ac433um-は-rtl8192eu-というドライバで動いた">WN-AC433UM は rtl8192eu というドライバで動いた</h3>

<p>rtl8192eu というドライバは <code>yaourt rtl8192eu</code> で一応インストールされるのであるが、<br>
それだけだと WN-AC433UM は認識されなかった。</p>

<p>WN-AC433UM は、idVendor が 04BB、idProduct が 0959 であるが、<br>
<code>yaourt rtl8192eu</code> でインストールされるドライバではこれを認識するようになっていない。<br>
(注: 2016.11.09 時点)</p>

<p>なので、上記 idVendor、idProduct 値を認識するようにソースコードを書き換えた上で、<br>
ビルド・インストールする必要がある。ソースコードは以下から入手できる。</p>

<p><a href="https://github.com/Mange/rtl8192eu-linux-driver">Mange/rtl8192eu-linux-driver - GitHub</a><br>
なお、リビジョンは <code>f016814</code> を使った。</p>

<p>os_dep/linux/usb_intf.c に、以下のように追記する。<br>
(注: 妥当か不明だがとりあえず以下の書き換えでうまくいった)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>diff --git a/os_dep/linux/usb_intf.c b/os_dep/linux/usb_intf.c
</span><span class='line'>index 5a62f24..7138a26 100644
</span><span class='line'>--- a/os_dep/linux/usb_intf.c
</span><span class='line'>+++ b/os_dep/linux/usb_intf.c
</span><span class='line'>@@ -220,6 +220,8 @@ static struct usb_device_id rtw_usb_id_tbl[] ={
</span><span class='line'>        {USB_DEVICE(0x2357, 0x0109),.driver_info = RTL8192E}, /* TP-Link - Cameo */
</span><span class='line'>        /*=== PLANEX ===========*/
</span><span class='line'>        {USB_DEVICE(0x2019, 0xab33),.driver_info = RTL8192E}, /* PLANEX - GW-300S Katana */
</span><span class='line'>+       /*=== I-O DATA ===========*/
</span><span class='line'>+       {USB_DEVICE(0x04bb, 0x0959),.driver_info = RTL8192E}, /* I-O DATA */
</span><span class='line'> #endif
</span><span class='line'> 
</span><span class='line'> #ifdef CONFIG_RTL8723B</span></code></pre></td></tr></table></div></figure>

<p>ビルドし、インストールする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd rtl8192eu-linux-driver
</span><span class='line'>$ make
</span><span class='line'>$ sudo make install</span></code></pre></td></tr></table></div></figure>

<p>再起動すると、無線LAN ドングルを NIC として認識するようになった。</p>

<h2 id="wn-g150umk-編">WN-G150UMK 編</h2>

<p>上記 WN-AC433UM を認識させるにあたって散々ドライバをインストールしたせいなのであろうが、<br>
こちらは挿しただけで認識されてしまった。</p>

<h3 id="wn-g150umk-は-rtl8192cu-というドライバで動いている模様">WN-G150UMK は rtl8192cu というドライバで動いている模様</h3>

<p>もしかしたらドライバをインストールする必要があるかもしれないのでメモしておくと、<br>
WN-G150UMK は rtl8192cu というドライバで動いている模様。<code>lshw</code> コマンドで確認した。</p>

<h2 id="ちなみに、wn-ac433um-は-5-ghz-にしか対応していない">ちなみに、WN-AC433UM は 5 GHz にしか対応していない</h2>

<p>WN-AC433UM は 5GHz 帯「のみ」に対応しており、<br>
つまり 2.4 GHz 帯を用いる無線機器とは接続ができない。スキャンしても発見すらしてくれない。<br>
2.4 GHz っていうのはたとえば Android 5.0 以前の Android 端末のテザリングであったり、<br>
ちょっと古めのルーターだったりが該当する。</p>

<p>完全に自分の見落としであるのだが、我が家の装備はことごとく 2.4 GHz 帯を扱うモノばかりだったので、<br>
つまりせっかく頑張って WN-AC433UM を Linux に認識させたのであるが、日の目を見なかったのである…。<br>
悲しい。そんなわけで WN-G150UMK を書い直したが、こちらは快調に動いてます。ナイス。</p>

<h2 id="参考リンク">参考リンク</h2>

<ul>
<li><a href="http://www.iodata.jp/product/network/adp/wn-ac433um/">WN-AC433UMシリーズ - I-O DATA</a></li>
<li><a href="http://www.iodata.jp/lib/product/w/4078.htm">WN-G150UMK - I-O DATA</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golang.tokyo #1@mercari]]></title>
    <link href="http://pankona.github.io/blog/2016/10/25/golangtokyo/"/>
    <updated>2016-10-25T10:38:13+00:00</updated>
    <id>http://pankona.github.io/blog/2016/10/25/golangtokyo</id>
    <content type="html"><![CDATA[<p>2016.10.25 に六本木の森タワーメルカリさんにて、golang.tokyo #1 が行われました。</p>

<p><a href="http://golangtokyo.connpass.com/event/39965/">golang.tokyo #1 - connpass</a></p>

<p>以下に togetter まとまってます。<br>
<a href="http://togetter.com/li/1040839">メルカリ本社で開催されたGo言語勉強会 golang.tokyo #1 #golangtokyo - Togetterまとめ</a></p>

<p>参加者の方のまとめです。きれいにまとまっていて読み応えあります。<br>
<a href="http://godgarden.goat.me/3Hf9qTNO">Hello Gophers, Hello Golang.tokyo #1 - 365 simple life - g.o.a.t</a></p>

<p>本イベントにブログ枠にして参加させていただきましたので、<br>
その内容をレポートしていきます。</p>

<p><img src="http://pankona.github.io/images/golang.tokyo-1/06.jpg" alt="golang.tokyo-1"><br>
図1. 入り口にていただいたステッカー。にゃってとごっふぁーくん。かわゆし。</p>

<h2 id="どういう主旨のイベントかと言うと">どういう主旨のイベントかと言うと</h2>

<p>いわゆる一般的な勉強会（？）でやるような、「数人の発表者が順繰りにスライドを用いて発表を行っていく」という体ではなく、パネルディスカッション形式。<br>
事前に収集された質問に対して、パネラーの方々が体験談を踏まえて回答をしていく、というのが主な内容。<br>
名だたる5名のパネラーさん達の詳細については、<a href="http://golangtokyo.connpass.com/event/39965/">connpass のイベントページ</a>を参照いただきたい。</p>

<p><img src="http://pankona.github.io/images/golang.tokyo-1/05.jpg" alt="golang.tokyo-1"><br>
図2. 司会の tenntenn さん。</p>

<p><img src="http://pankona.github.io/images/golang.tokyo-1/09.jpg" alt="golang.tokyo-1"><br>
図3. 向かって左正面。Songmu さん、大谷さん、kaneshin さん。</p>

<p><img src="http://pankona.github.io/images/golang.tokyo-1/02.jpg" alt="golang.tokyo-1"><br>
図4. 向かって右正面。y_matsuwitter さん、辻さん。</p>

<p>写真遠いし真っ黒やんけ。しかし顔で勉強会するわけじゃないということでご容赦いただければと思います。</p>

<p>ちなみに開始当初から軽食、おビールなんかも振る舞われており、20時前開始という、<br>
おそらく夕飯食べてないであろう我々には、とても良い環境を提供いただいておりました。<br>
メルカリさん、いつもありがとうございます。</p>

<h2 id="本番中も質問が募集されていた">本番中も質問が募集されていた</h2>

<p>Google Apps のどの機能なのかちょっと失念してしまったのですが、<br>
本番中も質問を次々ポストできる形式になっていて＋既存の質問に対してイイねが可能になっていて、<br>
みんなが聞きたい質問が優先的に採用されてディスカッションされるというスキームでした。</p>

<p>あんまり見かけないやり方だなぁと思いつつ、視聴者参加型で面白い仕組みだと思いましたので、<br>
今後もやってくれたらいいなー、と感想を残しておきます。</p>

<h2 id="そして本編---質問と回答集">そして本編 - 質問と回答集</h2>

<p>前置きが長くなってしまいましたが、<br>
ここからは実際どのような質問がされ、どのように回答がなされたのかを載せていきます。<br>
※ 全部載せるとだだ長くなってしまうので、独断と偏見で端折りつつ、お送ります。</p>

<h3 id="q.-メンバーの-go-の教育はどうしてますか？">Q. メンバーの Go の教育はどうしてますか？</h3>

<p>Go に馴染みのないメンバーにどうやって Go を学んでもらうか？というトピック。</p>

<ul>
<li>辻さん &gt; 

<ul>
<li><a href="https://tour.golang.org/welcome/1">tour of go</a>、<a href="https://golang.org/doc/effective_go.html">effective go</a> あたりから入ってもらう。</li>
<li><a href="http://qiita.com/tenntenn/items/0e33a4959250d1a55045">初心者が見ると幸せになる場所　#golang</a></li>
<li>標準ライブラリのコード読んだり</li>
<li>ハマりどころの勉強会をしたり</li>
<li>あとは実践あるのみでソースレビュー

<ul>
<li>経験ある人をレビュアーにいれ、Go っぽくないコードを指摘したり</li>
</ul></li>
</ul></li>
</ul>

<p><img src="http://pankona.github.io/images/golang.tokyo-1/04.jpg" alt="golang.tokyo-1"><br>
図5. そしてディスカッションが始まった</p>

<h3 id="q.-ideやデバッグはどうしているか">Q. IDEやデバッグはどうしているか</h3>

<p>Go でデバッガといえば <a href="https://github.com/derekparker/delve">delve</a> かと思ったが、思ったより使われていないのかなという印象。<br>
ちょこちょこテスト書いて動かしていけば、それほど難儀なデバッグが必要になることも少ないっていうことかしら？</p>

<ul>
<li>songmu さん &gt;

<ul>
<li>vim 使っている。メンバーが使っているのは結構バラバラ。</li>
<li>デバッグは主に print デバッグ。ちょっとコード書いてちょっとテスト書いて、みたいな。</li>
</ul></li>
<li>大谷さん &gt;

<ul>
<li>intellij idea。何人か vim。</li>
<li>デバッグは主に print デバッグ。実際に動かしながら。</li>
</ul></li>
</ul>

<h3 id="q.-コーディオング規約、レビューの指針、golint-に従うか、など。">Q. コーディオング規約、レビューの指針、golint に従うか、など。</h3>

<p>個人的には、従うと腹を決めて一度クリーンな状態になれば、あとはさほど苦ではないと思うが、はたして。</p>

<ul>
<li>辻さん &gt;

<ul>
<li>コーディング規約は <a href="https://github.com/golang/go/wiki/CodeReviewComments">CodeReviewComment</a> を基準にしている。</li>
<li>発火させるだけの単純なチャンネルには 空 struct を使う。</li>
<li>golint はベストエフォート。というのも、3rd party ツールがが生成するコードが golint に従ってない場合もあったりするようで…。

<ul>
<li>golint の対象を除外は grep -v で頑張る。</li>
</ul></li>
</ul></li>
<li>songmu さん &gt;

<ul>
<li>glint には従っている。従えば Go っぽい書き方ができてくると思う。</li>
</ul></li>
</ul>

<p><img src="http://pankona.github.io/images/golang.tokyo-1/13.jpg" alt="golang.tokyo-1"><br>
図6.songmu さん回答中。</p>

<h3 id="q.-webフレームワークとテンプレートエンジンは？ormは？">Q. Webフレームワークとテンプレートエンジンは？ORMは？</h3>

<ul>
<li>辻さん &gt;

<ul>
<li>Echo。パフォーマンス重視の選択。</li>
<li>テンプレートエンジンは&#8230;標準のを使うのは結構ツラかった。フロントエンドは Go では書いてない。</li>
<li>DB のラッパーは <a href="https://github.com/Masterminds/squirrel">squirrel</a> を使っている。</li>
</ul></li>
<li>kaneshin さん &gt;

<ul>
<li>当初は <a href="https://revel.github.io/">Revel</a> を使っていたが、重量級な感じだったのでとっぱらいたかった。

<ul>
<li>後に <a href="https://github.com/gin-gonic/gin">Gin</a> で置き換えた。</li>
<li>router に <a href="https://github.com/gorilla/mux">gorrila/mux</a>。もしくは標準の http。</li>
</ul></li>
<li>テンプレートエンジンは標準のがツライ。フロントエンドは SPA を JS で作っている。</li>
<li>ORM は <a href="https://github.com/go-xorm/xorm">XORM</a>。 一部では <a href="https://github.com/jinzhu/gorm">gorm</a>。</li>
</ul></li>
</ul>

<h4 id="ところでフロントエンド事情は…">ところでフロントエンド事情は…</h4>

<ul>
<li>Go のテンプレートはツライ。</li>
<li>react とか angular とか使っちゃう。</li>
</ul>

<p>みな口々に「Go のテンプレートはツライ」と言っていたのが印象的でした…。</p>

<h3 id="q.-エラー処理どうしてますか？pkg/errors？-panic-は？">Q. エラー処理どうしてますか？pkg/errors？ panic は？</h3>

<ul>
<li>tenntenn さん &gt;

<ul>
<li>pkg/errors を主に使う。</li>
</ul></li>
<li>songmu さん &gt; 

<ul>
<li>panic はなるべくしないように作る。</li>
<li>goroutine の中でのエラーは、<a href="https://godoc.org/golang.org/x/sync/errgroup">sync.ErrorGroup</a>。</li>
</ul></li>
</ul>

<p><a href="https://godoc.org/golang.org/x/sync/errgroup">sync.ErrorGroup</a> の使い方について、<br>
ちょうど近頃<a href="http://deeeet.com/writing/2016/10/12/errgroup/">類似トピックの記事 - sync.ErrGroupで複数のgoroutineを制御する</a>をポストされていた deeeet さん (※ e は 4つ) からのコメント。</p>

<ul>
<li><a href="https://twitter.com/deeeet?lang=ja">deeeet さん</a> &gt;

<ul>
<li>ErrorGroup は便利。たくさんの処理があって、一個でも失敗したらご破産にしたいときに使う。</li>
</ul></li>
<li>kaneshin さん &gt;

<ul>
<li>error はエラーを上位レイヤーに伝搬させていく思想。</li>
<li>panic はしっかり使っていく派。起動直後に実行されて失敗したらどうにもならないものとかに対して。</li>
</ul></li>
</ul>

<p><img src="http://pankona.github.io/images/golang.tokyo-1/08.jpg" alt="golang.tokyo-1"><br>
図7. deeeet さん (一番奥)。</p>

<h3 id="q.-git-に上がっているオススメの-go-で書かれたものは？">Q. Git に上がっているオススメの Go で書かれたものは？</h3>

<ul>
<li>kaneshin さん &gt;

<ul>
<li><a href="https://github.com/aws/aws-sdk-go">aws-sdk-go</a>。コードジェネレーション部が参考になる。</li>
<li>リクエストの作り方、リクエストのリトライの仕方。パッケージの構造なども。</li>
<li><a href="https://github.com/GoogleCloudPlatform/google-cloud-go">google-cloud-go</a> も参考になる。</li>
<li><a href="https://github.com/google/go-github">go-github</a> も。</li>
<li><a href="https://github.com/kaneshin/gate">kaneshin/gate</a>。Makefile の使い方がポイント。rake task 的な。</li>
</ul></li>
</ul>

<h3 id="q.-ロガーどうしている？">Q. ロガーどうしている？</h3>

<p>ロガーは <a href="https://github.com/Sirupsen/logrus">logrus</a> が定番といった空気でした。</p>

<ul>
<li>辻さん &gt;

<ul>
<li><a href="https://github.com/Sirupsen/logrus">logrus</a>。</li>
<li><a href="https://github.com/uber-go/zap">zap</a> というのもある。使い勝手が特殊な感じだが高速らしい。</li>
</ul></li>
<li>大谷さん &gt;

<ul>
<li>Web アプリではフレームワークのロガーをそのまま使う。</li>
<li>fluentd でひっかけて Big Query に投げる、等。</li>
</ul></li>
</ul>

<h3 id="q.-パッケージ分けどうしているか？パッケージ名、循環-import-問題は？">Q. パッケージ分けどうしているか？パッケージ名、循環 import 問題は？</h3>

<p>パッケージ分けは割と悩むポイントかと思いますが、はたして。</p>

<ul>
<li>松本さん &gt;

<ul>
<li>ひとつのサービス内のサブパッケージは2つか3つくらい。

<ul>
<li>設計上のドメイン軸で切っていく。ニュース記事・ユーザー・&#8230;</li>
<li>サブパッケージのサブパッケージ、みたいにこまかく切っていくことはあまりない。</li>
<li>リポジトリ一個一個を小さく保つようにしている。</li>
</ul></li>
</ul></li>
<li>tenntenn さん &gt;

<ul>
<li><a href="https://blog.golang.org/go1.5">internal package</a> というのもあるが、使うのをやめた。</li>
<li>別にそこまでしなくても、例えば private とかつけておいて区別さえできればよく、またこうやっとくといざというときにも使える。</li>
</ul></li>
</ul>

<p>あとは、以下のような意見も。</p>

<ul>
<li>Go っぽい感じを意識すると、あんまりパッケージを分けない？</li>
<li>microservice だと、microservice 同士で重複した処理が出てきたりする。パッケージ化して、service 同士で共有するか？

<ul>
<li>ロジックを共有すると、変更がお互いに影響してしまうので留意が必要。</li>
</ul></li>
</ul>

<h3 id="q.-テスト周り">Q. テスト周り</h3>

<ul>
<li>songmu さん &gt;

<ul>
<li>最初は標準を使っていたが、そのうち <a href="https://github.com/stretchr/testify">testify</a> を使うように。</li>
<li>lestrrat さんの mysql のテストに使うフレームワークを使ったりもしている。<a href="https://github.com/lestrrat/go-test-mysqld">lestrrat/go-test-mysqld</a>。</li>
</ul></li>
<li>kaneshin さん &gt;

<ul>
<li>CI 周りはツラくて常に戦っている。テスト全消化で 30 分かかったりしている。ツラミ。

<ul>
<li>今の気持ちとしては、DB 周りのテストは消したい。モック使いたい。</li>
<li>GAE にデプロイするものは、全て Pure Go で動くように設計している。テストしやすいように。</li>
</ul></li>
</ul></li>
<li>deeeet さん &gt; 

<ul>
<li>フレームワーク使わない派。フレームワークは mini DSL みたいなものだと思っていて、それを覚えるのはつらい。新規メンバーをげんなりさせる原因。</li>
<li>DB 周りのテストは、interface を使ってモックする。依存している部分を interface で分ける。</li>
<li>詳しくはここ → <a href="http://deeeet.com/writing/2016/10/25/go-interface-testing/">Golangにおけるinterfaceをつかったテスト技法 | SOTA</a></li>
</ul></li>
<li>songmu さん &gt;

<ul>
<li>DB のテストはモックせずに実際に DB を立ててやるべき派。</li>
<li>ロジック外の部分の問題も留意するべき。設定ファイルの関係で実際に DB にデータが入らなかったりすることも起こる。</li>
</ul></li>
</ul>

<h3 id="q.-デプロイまでのフロート工夫している点。ciとか。">Q. デプロイまでのフロート工夫している点。CIとか。</h3>

<ul>
<li>kaneshin さん &gt;

<ul>
<li>ansible。dynamic inventry を使っている。</li>
</ul></li>
</ul>

<h4 id="ところで、go-のビルドが遅くなる理由">ところで、Go のビルドが遅くなる理由</h4>

<p>Go のビルドは一般的には早いと言われているが、遅いとしたらそれは何故かと言うと…？</p>

<ul>
<li>import が煩雑である。依存が連なっていて、フルビルドがかかってしまう場合。</li>
</ul>

<p>これは例えば、A が B に依存していて、B が C に依存している、なんていうシチュエーションのとき、C を変更したら依存を遡って B も A もビルドが走ってしまう、ということが起こる模様。<br>
ちょうど C言語の include と同じような感じかな。ヘッダー変えたら全ビルド走っちゃうみたいな。<br>
個人的には Go でビルド速度にそれほど苦を感じたことはないが、とはいえ、留意されたしである。</p>

<h3 id="q.-pprof-を本番で使っている？モニタリングやチューニングは？">Q. pprof を本番で使っている？モニタリングやチューニングは？</h3>

<ul>
<li>大谷さん &gt;

<ul>
<li>pprof は本番では使ってない</li>
<li>モニタリングは zabbix で監視。プロセスが落ちたら復活させたり。</li>
<li>チューニング面では、文字列を + で繋がない。とか。</li>
</ul></li>
<li>松本さん &gt;

<ul>
<li>pprof ではなく、<a href="https://github.com/fukata/golang-stats-api-handler">golang-stats-api-handler</a> を使っている。</li>
<li><a href="https://www.datadoghq.com/">datadog</a> でリソース監視。プロセスが落ちたらすぐ再起動するようになっている。</li>
<li>個のチューニングではなく、横に並べられる設計でスケールできるようにしておく。札束で殴る。金の弾丸！</li>
</ul></li>
</ul>

<h2 id="その他の質問">その他の質問</h2>

<p>概ね、以上のトピックスでディスカッションが行われました。<br>
他にも、回答は得られませんでしたが、</p>

<p><img src="http://pankona.github.io/images/golang.tokyo-1/11.jpg" alt="golang.tokyo-1"><br>
図8. Go言語プログラマの給料はいかほどか…</p>

<p>なんていう質問も出たり。<br>
ネタも挟みつつ、終始知見に溢れた有意義なディスカッションでありました。</p>

<h2 id="おわりに">おわりに</h2>

<p>運営の方々、登壇の方々、お疲れ様でした！</p>

<p>golang.tokyo #2 も計画されていると噂を聞きますので、<br>
興味を持たれた方、チェックしてみてはいかがでしょうか。<br>
Go 言語に興味さえあれば、参加して楽しいかと思います。</p>

<p><img src="http://pankona.github.io/images/golang.tokyo-1/07.jpg" alt="golang.tokyo-1"><br>
図9. 戦利品としてTシャツいただきました！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atte Fes@mercari]]></title>
    <link href="http://pankona.github.io/blog/2016/04/18/atte-fes/"/>
    <updated>2016-04-18T10:34:12+00:00</updated>
    <id>http://pankona.github.io/blog/2016/04/18/atte-fes</id>
    <content type="html"><![CDATA[<p><img src="http://pankona.github.io/images/attefes/title.jpg" alt="attefes"></p>

<p>2016.04.18 に、六本木は森タワーのメルカリさん宅にて、atte fes が行われました。<br>
<a href="http://tech.mercari.com/entry/2016/04/20/130620">アッテの開発技術をお伝えする atte FeS【Go・Swift開発編】を開催しました - Mercari Engineering Blog</a><br>
本イベントにブログ枠にて参加させていただきましたので、ひとつそのレポートをば、したためます。</p>

<p>発表時に用いられた資料は、↑のリンク先にアップしていただいているので、参照されたし。<br>
ちなみに、冒頭の画像は会場でいただいたデカールです。ねこかわいい。</p>

<h2 id="最初にビールと軽食で乾杯">最初にビールと軽食で乾杯</h2>

<p>いきなり技術的な話題ではないところからなんですが、実にシャレオツだったビールブースにふれないわけにはいかない。</p>

<p><img src="http://pankona.github.io/images/attefes/0.jpg" alt="attefes"><br>
図1. 三種類のビールが提供されている。しかも缶じゃない。感動。</p>

<p><img src="http://pankona.github.io/images/attefes/1.jpg" alt="attefes"><br>
図2. 軽食が提供されている。</p>

<p>ビールは3種類とも一杯ずついただきましたが、とても美味でございました。<br>
また夕飯食べずに駆けつけたものだったので、普通に空腹でありました。軽食もいただけて良かった！<br>
おかげさまで集中して発表に耳を傾けることができました。ありがとうございました。</p>

<p><img src="http://pankona.github.io/images/attefes/2.jpg" alt="attefes"><br>
図3. 司会の方の音頭で乾杯。</p>

<h2 id="アッテ開発の技術：golang-と-google-cloud-platform-(鶴岡達也さん)">アッテ開発の技術：<br>Golang と Google Cloud Platform (鶴岡達也さん)</h2>

<p>さて、発表内容について。</p>

<p><img src="http://pankona.github.io/images/attefes/3.jpg" alt="attefes"><br>
図4. 鶴岡さん</p>

<p>ひとつめは鶴岡達也さんによる「Golang と Google Cloud Platform」。</p>

<p>発表の具体的な内容は実際に資料をご覧いただければ分かると思いますので、<br>
本記事では私が印象に残った箇所について触れていくことにします。</p>

<h3 id="なぜ-web-アプリ開発に-go/gae-を採用したか？">なぜ Web アプリ開発に Go/GAE を採用したか？</h3>

<p>さまざま理由があったようですが、個人的には、<br>
<strong>「3年後にもエンジニアにとって魅力的な場所であるため」</strong> に、多様性と技術の開拓の意味もふくめての採用であったというのが印象的でした。<br>
そういうふうな文化があると、エンジニアにとって満足感が高い職場になっていくんじゃないかなー、等と。<br>
とてもいいと思いました。ええ、弊社でもぜひそうしていきたい…。</p>

<h3 id="go言語はチームで開発しやすい">Go言語はチームで開発しやすい</h3>

<p>私も個人的にちょいちょい Go 言語を触りますが、ほんとに周辺ツールの充実っぷりが凄まじい。<br>
lint、コードフォーマッタ、変数名には Go 言語公式のポリシーが存在する、等。<br>
チーム開発に採用すれば、やれインデントが〜とか、インポートの順番が〜、とかをソースレビューに持ち込むこともなくなる。<br>
そういう点も学習コストを下げるのに役立っているかな。Go 言語、私もオススメです。</p>

<h3 id="godoc-を有効に使う">GoDoc を有効に使う</h3>

<p>GoDoc は概ね常に最新に保っているとのことで、つまり、<br>
「API を使いたいひとはとりあえず GoDoc 見て」で済んでいる、らしいです。<br>
チームで開発しやすい、効率化という面で GoDoc を有効に使えている例かな、と。<br>
ドキュメントをおざなりにしないところ、素敵です。<br>
またこういうドキュメンテーションのためのツールが提供されているのも Go 言語のいいところ。<br>
Go 言語、私もオススメです。</p>

<h3 id="gae-のインスタンスは-200-ms-で立ち上がる">GAE のインスタンスは 200 ms で立ち上がる</h3>

<p>速い！この速さはオートスケール時にとっても活きてくる模様。<br>
アクセス過多でスパイクしてもあっとうい間に平穏を取り戻す図は、私の心にも平穏と興奮を与えるものでありました。</p>

<h3 id="その他の話題、rdb-vs-nosql、datastore-の良いところ、等">その他の話題、RDB vs NoSQL、DataStore の良いところ、等</h3>

<p>他にも興味深いトピックについて話されていました。<br>
ぜひ、スライドを直に見ていただければと。</p>

<h2 id="アッテ開発の技術：swift-と-rxswift-(大庭慎一郎さん)">アッテ開発の技術：<br>Swift と RxSwift (大庭慎一郎さん)</h2>

<p><img src="http://pankona.github.io/images/attefes/4.jpg" alt="attefes"><br>
図5. 大庭さん</p>

<p>正直に言うと Reactive Programming というものがほぼ分かってない私ですが、<br>
発表は非常に興味深く聞かせていただきました。Reactive Programming ええな！</p>

<h3 id="swift-の採用を決めた経緯">Swift の採用を決めた経緯</h3>

<p>Swift を採用した経緯について。そもそも流用する資産がなかったとのことで、<br>
だったら色々機能の豊富な Swift にしましょうよ、ということだったと思います。</p>

<p>Objective-C は、それはそれで今まで蓄えられたノウハウが Web 上に豊富に転がっていたりして、いわゆる「ハマりにくさ」では Swift より上のような気はする。そういう意味では Objective-C にも良いところはあるだろう。<br>
とはいえ、Swift と Objective-C、どっち採用したらテンションあがるかと言われれば、やはり Swift であるかなと。3年後もエンジニアにとって魅力的な場所を醸造しているひとつかもしれない、等と思いつつ。</p>

<h3 id="リアクティブプログラミングに頼るとプログラミング能力が下がる？">リアクティブプログラミングに頼るとプログラミング能力が下がる？</h3>

<p>プログラミング能力が下がるは言い過ぎかも？<br>
スライド上のサンプルコードは短く完結にわかりやすく書かれていて、いったん慣れてしまったら辞められない的なものを感じた。<br>
なるほど、馴染んできたら普通のプログラミング (？) のやり方忘れちゃうかもしれないですね。</p>

<p>とはいえ学習コストは高い模様。<br>
質疑応答では「急に全部ではなく、部分的に採用していくこともできる」と。<br>
データバインディングから始めるのがやりやすいのではないか、と仰っておられました。</p>

<h3 id="リアクティブプログラミング-参考サイト">リアクティブプログラミング 参考サイト</h3>

<p>スライド中でも触れられていますが、リアクティブプログラミングについては以下のサイトが理解の助けになったとのこと。<br>
<a href="http://ninjinkun.hatenablog.com/entry/introrxja">【翻訳】あなたが求めていたリアクティブプログラミング入門 - ninjinkun&#39;s diary</a></p>

<p>以下のページでは、Reactive な動き (Stream) を図で理解できるようになっています。<br>
<a href="http://rxmarbles.com/">RxMarbles - Interactive diagrams of Rx Observables</a></p>

<h2 id="アッテ開発の技術：アッテ-ios-の設計と開発フローの変遷-(石川洋資さん)">アッテ開発の技術：<br>アッテ iOS の設計と開発フローの変遷 (石川洋資さん)</h2>

<p><img src="http://pankona.github.io/images/attefes/7.jpg" alt="attefes"><br>
図6. 石川さん</p>

<h3 id="同じ構造の実装の一元化">同じ構造の実装の一元化</h3>

<p>よくある同じ構造のもの、 ページネーション、フォームのバリデーションであるとかの共通化の話。<br>
MVVM でいうところの VM 部分で、共通するGenericな部分 + 型スペシフィックな部分は型パラメータもらって作る、という構造の紹介。<br>
特にページネーションは、10回書いたら7回くらいバグってるくらいのバグを埋め込みやすい部分らしく、<br>
共通化することで、「高速な開発で、かつ安全」な設計に近づくことができたとのこと。</p>

<p>新しい設計を試すのは、場合によっては難しいことだと思う。<br>
つい、いま動いているところは触りたくない、以前作ったものと同じような構造が出てきたら踏襲する、等と<br>
してしまいがちな昨今（ですよね）、飽き足らず、より良いモノ作ろうぜという熱気にあふれている、等と感じておりました。<br>
素敵だ。</p>

<h3 id="自動デプロイの話">自動デプロイの話</h3>

<p>ご多分にもれずというか、やはり iOS アプリも自動ビルド/自動デプロイをなさっている模様。<br>
構成要素としては、<br>
* Travis CI (CI 時間は7分くらい)<br>
* agvtool でビルド番号を振る (Xcodeに付随)。<br>
* DeployGate (dev) と TestFlight (prod) にデプロイ</p>

<p>また、その他の作法として、<br>
* 手元でのアーカイブはしない。<br>
* QAが通ればそのまま審査へ</p>

<p>というのが紹介されていました。</p>

<p>ビルドとかデプロイ、あと審査もだと思いますが、ものすごく属人化しがちな部分であると思う。<br>
<strong>「病気で倒れても誰でもデプロイできる」</strong> と仰っていましたが、これって本当に大事なこと。<br>
作業をひとにロックインしない工夫をしていかないとね。属人化は不幸の始まり。</p>

<p>ところで CI に掛かる時間が7分って結構早いような気がしている。<br>
早さ、特に CI とかそういう常日頃から何度も繰り返し行われる事柄の早さは重要。</p>

<p>何も考えずにそこそこの規模の iOS アプリビルドしたら、結構時間かかっちゃうと思うんだよね。それこそ10分くらい余裕で。<br>
さらっと7分って言っていましたが、ここにはきっと色々な工夫がなされているんだと想像します。</p>

<h2 id="その後">その後</h2>

<p><img src="http://pankona.github.io/images/attefes/8.jpg" alt="attefes"><br>
図7. 懇親会。みな思い思いの方を捕まえては話し込む。</p>

<p><img src="http://pankona.github.io/images/attefes/9.jpg" alt="attefes"><br>
図8. 懇親会。運営おつかれさまでした。</p>

<h2 id="おわりに">おわりに</h2>

<p>Mercari からスピンアウト (?) した SOUZOH という組織は、なんというか、<br>
新しいやり方をどんどん取り入れていて、エンジニア的にはテンションあがる環境であるという印象でした。<br>
それで実際うまいことやれているっていうのは、なお凄いことかな。</p>

<p>そんな感じで、おいしいビールをいただきながら学ばせていただいた atte fes でございました。オススメは Tokyo White。<br>
運営の方々、登壇の方々におかれましては、大変おつかれさまでございました！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASUS ZenPad 7.0 (Z370C) レビュー その三 : イマイチなところ編]]></title>
    <link href="http://pankona.github.io/blog/2016/03/30/z370c-bad-point/"/>
    <updated>2016-03-30T15:36:22+00:00</updated>
    <id>http://pankona.github.io/blog/2016/03/30/z370c-bad-point</id>
    <content type="html"><![CDATA[<p>前回に引き続き、ZenPad 7.0 (Z370C) のレビューを記事にする。<br>
今回は、1ヶ月程度使って感じた ZenPad 7.0 に対するフラストレーションについて。<br>
つまりイマイチな点に触れていく。<br>
感触良い点については前回の記事で触れているので、ぜひそちらも見てね。</p>

<h2 id="タッチの精度・感度がいまいち">タッチの精度・感度がいまいち</h2>

<p>これはもしかしたら初期不良の類かもしれないが、とにかくタッチが微妙である。<br>
「一度タップしたのに効かなかったのでもう一度タップしてみる」、みたいなことがしょっちゅうである。</p>

<p>あとはロングタップ、いわゆる長押しであるが、これがとても不安定である。<br>
一点をタップし続けているにも関わらず、タップ位置がぐらぐらずれてしまったり。<br>
長押しに関しては、何度かトライしているとそのうち成功したりするが、かなり気を使わなければならないのが残念なところである。</p>

<p>※ ネット上のレビュー記事を見ていると同様の報告は見当たらなかったので、、、私が持っている端末限定の現象の可能性もある。</p>

<h2 id="動画再生には向かない">動画再生には向かない</h2>

<p>性能の問題であろうが、比較的高ビットレートな動画の再生には耐えられなかった。<br>
カクカクになったり、音だけ進んで絵がついてこない、等の現象が起きるケースがあった。<br>
16:9 の画面は動画再生には良いので、この点は仕方ないと思いつつ、若干の残念感はある。</p>

<p>ちなみに、ニコニコ動画のエコノミーならいけます。</p>

<h2 id="ゲームも概ね向かない">ゲームも概ね向かない</h2>

<p>こちらもお察しいただけるかと思うが、昨今のぐりぐり 3D が動くようなゲームはほぼ動かないと言っていい。<br>
タブレット界隈のベンチマーク的な存在である○○マスターとかも一応試してみたが、、厳しかった。<br>
そういうのをプレイしたいひとには本当にオススメ端末なので、注意されたしである。</p>

<p>極軽い処理で済むゲーム、将棋とかそこらへんだろうか、であれば動作すると思われる。</p>

<h2 id="sim-が挿さらない">SIM が挿さらない</h2>

<p>これは不満点とはちょっと違うが、惜しいと思う点。<br>
SIM が挿さらないので、ネットワークに関しては WiFi での運用となる。<br>
移動中のネットワークに関しては、スマホのテザリングか何かで解決してあげる必要がある。</p>

<p>とはいえ、SIM を使いたかったら、SIM が挿せる ZenPad 7.0 (Z370KL) があるので、<br>
そちらを求めるのが正しい。ちなみに性能も Z370KL のほうが若干良い模様である。</p>

<h2 id="総評">総評</h2>

<p>3つの記事にわたって、ZenPad 7.0 (Z370C) の見た目、良いところ、いまいちなところについて記事にした。<br>
性能がいまいちだったり SIM が挿せなかったりという不満点はあるものの、<br>
値段が安いため、用途がバッチリ合えば非常にコストパフォーマンスの高い良機種であると思う。</p>

<p>個人的には、引き続き使い倒してやろうと思っているので、また何か気づいたことがあれば記事にしようかな、と。<br>
前回までの記事で紹介できなかった画像をそえつつ、今回はこのへんで。</p>

<p><img src="http://pankona.github.io/images/z370c/2.jpg" alt="Z370C"><br>
ZenPad 7.0 with ZenClutch 開いてみたところ。片手で持つのに手頃な大きさのタブレット。</p>

<p><img src="http://pankona.github.io/images/z370c/10.jpg" alt="Z370C"><br>
ZenClutch は渋め。「ASUS COLLECTION」と印字されている。渋め。</p>

<p><img src="http://pankona.github.io/images/z370c/8.jpg" alt="Z370C"><br>
側面。電源ボタンとボリュームボタンが配置されている。カバーつけてしまうとちょっと押しにくい。<br>
ただ、カバーあければ自動でスリープ解除になるので、あまり押す機会はないかも。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASUS ZenPad 7.0 (Z370C) レビュー その二 : 良いところ編]]></title>
    <link href="http://pankona.github.io/blog/2016/03/29/z370c-good-point/"/>
    <updated>2016-03-29T14:53:19+00:00</updated>
    <id>http://pankona.github.io/blog/2016/03/29/z370c-good-point</id>
    <content type="html"><![CDATA[<p>前回に引き続き、ZenPad 7.0 (Z370C) のレビューを書いていく。<br>
今回は、1ヶ月程度使って分かってきた ZenPad 7.0 の使用感について。</p>

<h2 id="性能はぶっちゃけいまいち">性能はぶっちゃけいまいち</h2>

<p>1ヶ月使って、使わなくても分かることかもしれないが、性能は正直物足りないと感じる。<br>
何かにつけて動作がモタモタするというか。Chrome 起動に0.5秒くらい掛かるとかそういうの。<br>
ZenPad 7.0 のスペックそのものは<a href="https://www.asus.com/jp/Tablets/ASUS_ZenPad_70_Z370C/specifications/">公式ページ</a>を参照されたし。</p>

<p>みんな大好き Antutu ベンチマーク的には、20000点弱くらい。これは Nexus 7 (2012) とドッコイな感じ。<br>
そりゃーいまどきの OS 乗っけていまどきのアプリを動かせば、重たく感じるのも無理はないかな、と。</p>

<p>とはいえ、1万円台で購入できるタブレットであることを考えると妥当とも思える。<br>
逆に言えば、性能をそれほど必要としない使い方をする分には問題にならない。</p>

<p>なので、 <strong>「この使い方をすれば快適」</strong> というのを今回は紹介していく。</p>

<h2 id="web-ブラウジング">Web ブラウジング</h2>

<p>いわゆるネットサーフィンをする分には、それほどストレスを感じることはなかった。<br>
※ ページが重かったらキツイ。</p>

<p>普段は 5 インチのスマートフォンを使っている私であるが、<br>
やはり画面が大きいほうが文字も見やすいし、目にも優しい。</p>

<p>スマートデバイスの主な用途がネットサーフィンの方はかなりいると思うが、<br>
そういう用途では使用に耐えうる、むしろ快適、となるんじゃないかと。</p>

<p><img src="http://pankona.github.io/images/z370c/6.jpg" alt="Z370C"><br>
Yahoo を表示してみた様子。画面が広いため表示できる情報量は多い。</p>

<h2 id="電子書籍">電子書籍</h2>

<p>16:9 の画面なので電子書籍には若干不向きかもしれない（画面上下に黒帯が出てしまう）が、<br>
これもやはりスマートフォンの 5 インチ前後の画面で見るのに比べれば、見やすさが雲泥の差である。</p>

<p><img src="http://pankona.github.io/images/z370c/9.jpg" alt="Z370C"><br>
漫画も読みやすい。スマートフォンだと読む気が起こらなかったが、これならイケる気がする。</p>

<h2 id="フォトビューア">フォトビューア</h2>

<p>写真をタブレットで見るのは定番かもしれないが、やはり大きめの画面で見るのは良い。<br>
昨今のスマートフォンは高解像度な写真も取れるし、Google フォトの同期を活かして、<br>
撮るのはスマホ、見るのはタブレット、みたいにしていくスタイルもオススメ。快適です。</p>

<p><img src="http://pankona.github.io/images/z370c/7.jpg" alt="Z370C"><br>
写真を表示してみた様子。とても見やすい。かわいい。</p>

<h2 id="大きさが手頃なので電車内でも快適">大きさが手頃なので電車内でも快適</h2>

<p>上記の用途は、私の場合は主に移動中に行うことになるのだが、<br>
前回の記事で触れたように、7 インチという大きさが手頃で持ちやすく、電車のお供してとても優秀。<br>
ついでに ZenClutch で滑りにくいこともあり、片手運用も可能。片手つり革でも大丈夫。</p>

<h2 id="fep-は-atok">FEP は ATOK</h2>

<p>実は ATOK がプリインである。常日頃から ATOK ユーザである私にとってこれは朗報。<br>
というか ATOK 買っているのでプリインじゃなくても良かったんだけど。ATOK オススメ。<br>
これは ZenPad のレビューではない気もするが、ATOK プリインの ZenPad オススメ、ということで。</p>

<h2 id="電池のもちは普通">電池のもちは普通</h2>

<p>そこかしこの記事で Z370C はバッテリーのもちが悪い、と言われているような気がするが、<br>
やたら電池を食うような使い方をしない限り、充電しないで丸一日はもつ程度には動いてくれる。<br>
私にとってこれは十分なので、バッテリー面で特に不満を感じることはなかった。</p>

<h2 id="ということで">ということで</h2>

<p>使い方が間違っていなければ（変な期待を持たなければ）、性能がいまいちとはいえ、<br>
十分快適に使っていけるポテンシャルを持っているという印象でした。<br>
今回はこのへんで。… 次回はだめな使い方を紹介していく。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASUS ZenPad 7.0 (Z370C) レビュー その一 : 見た目編]]></title>
    <link href="http://pankona.github.io/blog/2016/03/28/z370c-appearance/"/>
    <updated>2016-03-28T15:40:56+00:00</updated>
    <id>http://pankona.github.io/blog/2016/03/28/z370c-appearance</id>
    <content type="html"><![CDATA[<p>ZenTour2016 にて ZenPad 7.0 (Z370C) を入手するに至った。<br>
ASUS様より無料でいただいた形であるが、レビュー記事をしたためることが条件である。</p>

<p>ので、ここから3つ、ZenPad 7.0 (Z370C) のレビューをしていく。<br>
まず見た目、次に使ってみて良いところ、最後に使ってみて悪いところ、について<br>
書いていこうと思う。</p>

<p>というわけで、見た目編、行きます。</p>

<h2 id="zenpad-7.0-(z370c)-を見よ">ZenPad 7.0 (Z370C) を見よ</h2>

<p>こちらが Z370C with ZenClutch である。<br>
以下はオモテ面。なお、大きさのイメージが伝わりやすいように近くにポンジュースを配置している。</p>

<p><img src="http://pankona.github.io/images/z370c/1.jpg" alt="Z370C"></p>

<p>今回は本体だけでなく、周辺アクセサリであるカバーもいただいている。<br>
ZenClutch。結構高いんだよこれ。いやほんとに。値段の甲斐あってか(?)、さながら高級財布のような佇まいである。<br>
以下はウラ面。</p>

<p><img src="http://pankona.github.io/images/z370c/3.jpg" alt="Z370C"></p>

<p>この ZenClutch であるが、本革のような雰囲気があり、なんというか、手触りが良い。<br>
ただ、タブレット本体を使う際にはカバーを開いて本体の背面側に折り返す関係上、<br>
タブレット使用中はおそらくその手触りの良い部分に触れることがない。滑り止めにもなりそうなのだが。<br>
少し残念であるが、とはいえ小脇に抱えて持ち歩くにはとても良いことには変わりない。</p>

<h2 id="大きさは持ち運びにはちょうどいい">大きさは持ち運びにはちょうどいい</h2>

<p>ZenPad 7.0 (Z370C) は名の通り 7 インチのタブレット。大きさ的には Nexus 7 シリーズとほぼ同等。<br>
Nexus 7 よりも若干薄いかな、と。</p>

<p><img src="http://pankona.github.io/images/z370c/4.jpg" alt="Z370C"></p>

<p>そして軽い。公称値は 272 グラム。ZenClutch を着せているので若干重たくなるとはいえ、やはり軽い。<br>
このくらいの軽さであれば、かばんに入れておいても全く気にならないレベルであると感じる。</p>

<h2 id="カバーをあけると自動でスリープ復帰">カバーをあけると自動でスリープ復帰</h2>

<p>電源ボタンを押さずともスリープから復帰するのはなかなか快適。<br>
電源ボタンがへたって故障する心配もない点も大きいと思う。<br>
ちなみに当然、カバーをしめたら自動でスリープします。これも快適。</p>

<h2 id="ベゼルは狭め">ベゼルは狭め</h2>

<p>ベゼル、特に左右の枠は狭めであると感じた（他のタブレットと比較したわけではないが）。<br>
以下の画像で伝わるだろうか。</p>

<p><img src="http://pankona.github.io/images/z370c/5.jpg" alt="Z370C"></p>

<p>この点も見た目のスタイリッシュさに寄与している点ではないだろうか。</p>

<h2 id="見た目に関する総評">見た目に関する総評</h2>

<p>見た目に関しては、高級感があり、大きすぎず、軽く、画面もまあまあ大きく使えていて、良いとこばかりと言っていい。<br>
値段が1万円台であることを考えると、こと見た目に関してはお値段以上であると思われる。見た目オススメ。</p>

<p>ただ、性能に関してはちょっと色々あるので次回の記事で書こうと思うが、、、<br>
性能さえもう少しイケていれば、間違いなく誰にでもオススメできる機種だったと思う。惜しい。<br>
今回はこのへんで。次回は性能について。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Review Best Practices を日本語訳した]]></title>
    <link href="http://pankona.github.io/blog/2015/07/31/code-review-best-practices-jp-translation/"/>
    <updated>2015-07-31T10:36:04+00:00</updated>
    <id>http://pankona.github.io/blog/2015/07/31/code-review-best-practices-jp-translation</id>
    <content type="html"><![CDATA[<p><a href="http://kevinlondon.com/2015/05/05/code-review-best-practices.html">Code Review Best Practices - Kevin London&#39;s blog</a> の日本語訳を作成した。</p>

<p><a href="http://pankona.github.io/CodeReviewBestPractices_JP_Translation/">Code Review Best Practices 日本語翻訳</a></p>

<p>コードレビューのやり方に関しての記事であるが、分かりやすいしフムフムと感じる内容だったため、<br>
本人に許可をいただいて、翻訳、掲載をさせていただいた。<br>
ありがとう、ケビンさん。</p>

<p>おかしい点、改善点にお気づきの方がいらっしゃれば、issue登録、pull request、なんでもいいので連絡いただけると嬉しい。<br>
リポジトリは<a href="https://github.com/pankona/CodeReviewBestPractices_JP_Translation">こちら</a></p>

<p>実は<a href="http://postd.cc/code-review-best-practices/">POSTDに同じ記事を訳したもの</a>があることが分かったのだが、、、<br>
まあいくつあってもいいかな、等と思いつつ。ちなみに訳はほとんど同じだった。</p>

<p>この手のものは英語のままでいいと思う気持ちがある反面、<br>
やっぱり日本人は日本語のほうが速く読める人が多いだろうし、一定の価値はあるかな、等と思うところである。</p>

<p>記事の中で印象深かったのは、*Compliment / reinforce good practices* の部分である。</p>

<p>平たく言えば、コードレビューで見つけた良いところを褒めていけ、という内容。<br>
コードレビューではとかく指摘を探すことに終始しがちであるが、<br>
確かに、褒めるというかイイネというか＋１というか、をしていくことで、<br>
いい空気、もっといいコード書いてやろう的なモチベーションアップ、とか そういう効果もあるんじゃないかと思ったりもする。<br>
ギスギスしがちなコードレビューの現場にはオススメ。私もやっていきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocos2d-x + Travis CI + DeployGate]]></title>
    <link href="http://pankona.github.io/blog/2015/04/22/travis-ci-with-deploygate/"/>
    <updated>2015-04-22T10:25:11+00:00</updated>
    <id>http://pankona.github.io/blog/2015/04/22/travis-ci-with-deploygate</id>
    <content type="html"><![CDATA[<p><a href="http://pankona.github.io/blog/2015/04/19/cocos-with-travisci/">前回</a>の記事にて、cocos2d-xでのアプリ作成とTravis CIを連携させるとこまでいった。<br>
今回は成果物であるAPKをDeployGateにアップロードするところについて書き留めておく。</p>

<h2 id="だいたいのやり方">だいたいのやり方</h2>

<ul>
<li>ビルドが成功したら<code>curl</code>コマンドにてDeployGateにAPKをアップロードする。</li>
<li>アップロードにあたってDeployGateのAPI Keyが必要になる。DeployGateにログインして個人設定的なところを見れば載っている。</li>
<li>API Keyは.travis.ymlに書くことになるが、そのまま載せちゃうとセキュリティ的に問題なので暗号化する。

<ul>
<li>暗号化には<code>travis</code>コマンドを用いる。</li>
</ul></li>
</ul>

<h2 id="ちょっと細かいやり方">ちょっと細かいやり方</h2>

<p>まずはAPKアップロード成功後の.travis.ymlを載せておく。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>language: android
</span><span class='line'>
</span><span class='line'># Handle git submodules yourself
</span><span class='line'>git:
</span><span class='line'>    submodules: false
</span><span class='line'>
</span><span class='line'>env:
</span><span class='line'>  global:
</span><span class='line'>    secure: "TeSR8JLJd2Z0erCxcgLinC+me5SfwpgcCNwiTsqXn09erOgos2+mUbVQaSyo7Bw4OF4TmNpejX+jETd/lL4fTiWRDw6NW/cqEelk57fXJ5mmf5ey+tB1EkMFwd8x7Fw2vBe4xtO8KeohI6D1Gtu1qTYU9t9x4bhAd4qL15Y5osE="
</span><span class='line'>
</span><span class='line'>install:
</span><span class='line'># NDK configuration
</span><span class='line'>    - printenv
</span><span class='line'>    - echo `pwd`
</span><span class='line'>    - wget http://dl.google.com/android/ndk/android-ndk-r10d-linux-x86_64.bin
</span><span class='line'>    - chmod a+x android-ndk-r10d-linux-x86_64.bin
</span><span class='line'>    - ./android-ndk-r10d-linux-x86_64.bin -y | grep -v Extracting # because log will be too long!
</span><span class='line'>    - export NDK_ROOT=`pwd`/android-ndk-r10d
</span><span class='line'>    - echo $NDK_ROOT
</span><span class='line'>    - export PATH=$PATH:$NDK_ROOT
</span><span class='line'>    - echo $PATH
</span><span class='line'>
</span><span class='line'># Android SDK configuration
</span><span class='line'>    - export ANDROID_SDK_ROOT=/usr/local/android-sdk
</span><span class='line'>    - export PATH=$PATH:$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools
</span><span class='line'>
</span><span class='line'># git submodule
</span><span class='line'># Use sed to replace the SSH URL with the public URL, then initialize submodules
</span><span class='line'>    - sed -i 's/git@github.com:/https:\/\/github.com\//' .gitmodules
</span><span class='line'>    - git submodule update --init --recursive
</span><span class='line'>
</span><span class='line'># cocos setup 
</span><span class='line'>    - cd ./cocos2d
</span><span class='line'>    - python download-deps.py --remove-download=yes
</span><span class='line'>    - python ./setup.py
</span><span class='line'>    - export COCOS_CONSOLE_ROOT=`pwd`/tools/cocos2d-console/bin
</span><span class='line'>    - export PATH=$PATH:$COCOS_CONSOLE_ROOT
</span><span class='line'>    - export COCOS_TEMPLATES_ROOT=`pwd`/templates
</span><span class='line'>    - export PATH=$PATH:$COCOS_TEMPLATES_ROOT
</span><span class='line'>    - export ANT_ROOT=/usr/share/ant/bin
</span><span class='line'>    - export PATH=$PATH:$ANT_ROOT
</span><span class='line'>    - printenv
</span><span class='line'>    - cd ..
</span><span class='line'>
</span><span class='line'>script:
</span><span class='line'>    - cocos compile -p android -j 8
</span><span class='line'>
</span><span class='line'>after_success:
</span><span class='line'>    - echo $TRAVIS_BRANCH
</span><span class='line'>    - echo $TRAVIS_PULL_REQUEST
</span><span class='line'>    - '[ "$TRAVIS_BRANCH" == "master" -a "$TRAVIS_PULL_REQUEST" == "false" ] && curl -F "file=@./bin/debug/android/KonaReflection-debug.apk" -F "token=${DEPLOYGATE_TOKEN}" -F "message=Deploy from Travis CI" https://deploygate.com/api/users/pankona/apps'</span></code></pre></td></tr></table></div></figure>

<h3 id="前回からの変更点（apkアップロードのために追加した部分）">前回からの変更点（APKアップロードのために追加した部分）</h3>

<p>前回から増えたり変更したりしたのは以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>env:
</span><span class='line'>  global:
</span><span class='line'>    secure: "TeSR8JLJd2Z0erCxcgLinC+me5SfwpgcCNwiTsqXn09erOgos2+mUbVQaSyo7Bw4OF4TmNpejX+jETd/lL4fTiWRDw6NW/cqEelk57fXJ5mmf5ey+tB1EkMFwd8x7Fw2vBe4xtO8KeohI6D1Gtu1qTYU9t9x4bhAd4qL15Y5osE="</span></code></pre></td></tr></table></div></figure>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- '[ "$TRAVIS_BRANCH" == "master" -a "$TRAVIS_PULL_REQUEST" == "false" ] && curl -F "file=@./bin/debug/android/KonaReflection-debug.apk" -F "token=${DEPLOYGATE_TOKEN}" -F "message=Deploy from Travis CI" https://deploygate.com/api/users/pankona/apps'</span></code></pre></td></tr></table></div></figure>

<p>後者の部分で、<code>${DEPLOYGATE_TOKEN}</code>という環境変数を参照しているが、これを設定しているのが前者の部分。</p>

<h3 id="deploygate_tokenの暗号化">DEPLOYGATE_TOKENの暗号化</h3>

<p>以下のコマンドでDeployGateのAPI Keyを暗号化する。</p>

<p><code>$ gem install travis</code> # travisコマンドを使えるようにする。<br>
<code>$ travis encrypt DEPLOYGATE_TOKEN={My DeployGate API Key}</code> # DeployGateで確認したAPI Keyを暗号化するコマンド（中括弧はいらない）。</p>

<p>このコマンドで得られた文字列をそのまま.travis.ymlに貼っつければOKである。</p>

<h3 id="いつアップロードするか">いつアップロードするか</h3>

<p>以下の条件を満たした場合のみ、APKのアップロードを行うようにした。<br>
これは、Pull Requestがmasterにマージされたとき、を意味している（つもり）。<br>
<code>&quot;$TRAVIS_BRANCH&quot; == &quot;master&quot; -a &quot;$TRAVIS_PULL_REQUEST&quot; == &quot;false&quot; ]</code></p>

<p>これをやっとかないと、ブランチにコミットをPUSHしたタイミングだったりPull Requestを作ったタイミングだったり、でアップロードが走る。<br>
個人的にはやり過ぎ感があったので、APKはmasterからだけ作ればいいやという制限を施した。</p>

<h3 id="これがそこそこ楽だと思います">これがそこそこ楽だと思います</h3>

<p>AndroidアプリにAPKをいちいち頑張って転送しなくても、開発中アプリをインストールすることができるようになった。<br>
ちなみに、アップロードされたAPKはDeployGateアプリ経由で取得することになる。</p>

<p>今回はここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocos2d-x + Travis CI]]></title>
    <link href="http://pankona.github.io/blog/2015/04/19/cocos-with-travisci/"/>
    <updated>2015-04-19T02:26:14+00:00</updated>
    <id>http://pankona.github.io/blog/2015/04/19/cocos-with-travisci</id>
    <content type="html"><![CDATA[<p>引き続きcocos2d-xを使ってブロック崩しを作っている。<br>
かれこれ２ヶ月あまりが経過した。ほぼ通勤時間でのみ作っている。</p>

<p>いまのところの作業の流れとしては、<br>
* まずLinux向けにビルドして動作確認<br>
* 問題なさそうであれば、Android向けのビルドを実施<br>
* なんとかして実機にAPKを移し、インストールする</p>

<p>という手順なのであるが、実機へのデプロイがなかなか面倒である。<br>
基本的に電車内なので、ケーブルをスマホとPCに繋いで〜、というひと手間がなかなか面倒である。<br>
すると端末間のファイル共有だったり、原始的にメール越しにAPK共有、等があるが、、、やはり面倒である。</p>

<p>デプロイもっと楽にする手段としてDeployGateさんを使わせてもらうという手がある。<br>
これを用いると、変更をコミットするとそれだけで最新版APKがメールで送られてくるっていうようになるようである。</p>

<p>なので今回はこれを導入してみることにした。流れは以下のような感じになる予定である。<br>
* PC上にてcocos2d-xでアプリ作成。ソースをGithubにPush。<br>
* Travis CIでビルド。<br>
* ビルド成果物をTravis CIがDeployGateに送信。<br>
* DeployGateがわしのスマホにメールを送信（APK添付）。</p>

<p>以下、長文。</p>

<h2 id="cocos2d-x-+-travis-ci">cocos2d-x + Travis CI</h2>

<p>CI環境としてTravis CIをチョイスした。無料で使えるからである（Publicなリポジトリ限定かな）。<br>
初のTravis CI利用ということもあり、なかなかに躓いたというか知らんことが多かったので、備忘録を残す。</p>

<h3 id="そもそもtravis-ciに何をしてもらえるか">そもそもTravis CIに何をしてもらえるか</h3>

<p>ちょいちょい試してみたところ、以下のような感じである。</p>

<ul>
<li>GithubへのPushをトリガーにして自動的にビルド実施。

<ul>
<li>ビルドに限らず、任意のScriptを実行可能。自動テストなんかも行うようにするとなお吉。</li>
<li>ビルド前処理、後処理、など、割と細かくステージ分けがされている。</li>
</ul></li>
<li>ビルド失敗、成功の旨をメールにて通知。</li>
<li>masterだけでなく、他のブランチへのPushに対しても同様の処理をしてくれる。</li>
</ul>

<p>ざっくりだがこんな感じだろうと。無料で使えるにしては十分かな。</p>

<h3 id="さっそく設定する">さっそく設定する</h3>

<p>設定手順はこんな感じ。</p>

<ol>
<li>Travis CIのWebサイトにて、監視してほしいリポジトリの設定をする。</li>
<li>リポジトリのトップに .travis.yml を置く。</li>
<li>あとはソースをプッシュするだけ。</li>
</ol>

<p>(1)と(3)は別に問題ないと思われる。問題は(2)である。<br>
以下、.travis.ymlの内容について書く。</p>

<h3 id="ビルドパスした-.travis.yml-はこれ">ビルドパスした .travis.yml はこれ</h3>

<p>いかにもやっつけ感満載でありつつ、とりあえずビルドパスするところまでいけた。<br>
記念に貼り付けておく。もしかして誰かの役に立つことも願いつつ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>language: android
</span><span class='line'>
</span><span class='line'># Handle git submodules yourself
</span><span class='line'>git:
</span><span class='line'>    submodules: false
</span><span class='line'>
</span><span class='line'>install:
</span><span class='line'># NDK configuration
</span><span class='line'>    - printenv
</span><span class='line'>    - echo `pwd`
</span><span class='line'>    - wget http://dl.google.com/android/ndk/android-ndk-r10d-linux-x86_64.bin
</span><span class='line'>    - chmod a+x android-ndk-r10d-linux-x86_64.bin
</span><span class='line'>    - ./android-ndk-r10d-linux-x86_64.bin -y | grep -v Extracting # because log will be too long!
</span><span class='line'>    - export NDK_ROOT=`pwd`/android-ndk-r10d
</span><span class='line'>    - echo $NDK_ROOT
</span><span class='line'>    - export PATH=$PATH:$NDK_ROOT
</span><span class='line'>    - echo $PATH
</span><span class='line'>
</span><span class='line'># Android SDK configuration
</span><span class='line'>    - export ANDROID_SDK_ROOT=/usr/local/android-sdk
</span><span class='line'>    - export PATH=$PATH:$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools
</span><span class='line'>
</span><span class='line'># git submodule
</span><span class='line'># Use sed to replace the SSH URL with the public URL, then initialize submodules
</span><span class='line'>    - sed -i 's/git@github.com:/https:\/\/github.com\//' .gitmodules
</span><span class='line'>    - git submodule update --init --recursive
</span><span class='line'>
</span><span class='line'># cocos setup 
</span><span class='line'>    - cd ./cocos2d
</span><span class='line'>    - python download-deps.py --remove-download=yes
</span><span class='line'>    - python ./setup.py
</span><span class='line'>    - export COCOS_CONSOLE_ROOT=`pwd`/tools/cocos2d-console/bin
</span><span class='line'>    - export PATH=$PATH:$COCOS_CONSOLE_ROOT
</span><span class='line'>    - export COCOS_TEMPLATES_ROOT=`pwd`/templates
</span><span class='line'>    - export PATH=$PATH:$COCOS_TEMPLATES_ROOT
</span><span class='line'>    - export ANT_ROOT=/usr/share/ant/bin
</span><span class='line'>    - export PATH=$PATH:$ANT_ROOT
</span><span class='line'>    - printenv
</span><span class='line'>
</span><span class='line'>script:
</span><span class='line'>    - cd ..
</span><span class='line'>    - cocos compile -p android -j 8</span></code></pre></td></tr></table></div></figure>

<p>躓き備忘録を以下に記しておく。</p>

<h4 id="travis-ciは何で動いてるんだろ">Travis CIは何で動いてるんだろ</h4>

<p>Ubuntu 14.04（64bit）らしい。<br>
なので各種Linuxのコマンドは使える。</p>

<h4 id="cocosコマンド使えるようにする？">cocosコマンド使えるようにする？</h4>

<p>cocos2d-xの開発では、cocosコマンドによるビルドを使うのが便利である。<br>
ただし、ちょっと環境構築が面倒な一面もある。</p>

<p>上記のymlでは、結果的にcocosコマンドを使える状態にしている。<br>
「Travis CIはAndroidのビルドをサポートしている」ようなのだが、なのでもしかしたら、<br>
cocosコマンドを使えるようにしなくても、Ant、ndk-buildあたりでなんとかできるのかもしれない。</p>

<p>と思ったのだが、どうやらNativeビルドには対応していないようである（あらかじめ用意されてはいない）。<br>
なので、おとなしくcocosコマンドを使う方針で設定してみた。</p>

<h4 id="ndkを解凍するときにtravis-ciがerror-137で終わる">NDKを解凍するときにTravis CIがerror 137で終わる</h4>

<p>上記ymlでいうところの、以下の箇所を実行するとerror 137を報告してビルドが失敗に終わることがあった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- wget http://dl.google.com/android/ndk/android-ndk-r10d-linux-x86_64.bin
</span><span class='line'>- chmod a+x android-ndk-r10d-linux-x86_64.bin
</span><span class='line'>- ./android-ndk-r10d-linux-x86_64.bin -y | grep -v Extracting # because log will be too long!</span></code></pre></td></tr></table></div></figure>

<p>解凍時にログをリダイレクトしているが、これをしないとログが大量に出過ぎることが原因でTravis CIに怒られ、ビルドが失敗に終わる。<br>
それとは別に、解凍にメモリをくいすぎて、いわゆるメモリショートでプロセスが殺されるのがerror 137の原因らしい。。。</p>

<p><code>sudo: required</code> をファイルの冒頭に書いていたのであるが、それを消したらerror 137は解消した。<br>
意味不明だが、回避策もよくわからないのでもう追っかけるのはやめた。。。</p>

<h4 id="android-sdkはあえて用意しなくていい">Android SDKはあえて用意しなくていい</h4>

<p>NDKは自前で用意する必要があるが、Android SDKはTravis CI側で用意してくれているので、あえて自前で用意しなくてもいい。</p>

<p>というか、Android SDKをダウンロード → Update SDK の流れを実施すると、今度はストレージ容量を圧迫してしまうため、<br>
後続の処理（git submodule）実行時にストレージ容量不足でビルドが失敗に終わる。<br>
有料にすれば解決するのかな？とりあえずわしの環境ではAndroid SDKを自前で準備することは出来なかった。。</p>

<h4 id="gitスキームを用いているsubmodule取得に失敗する">gitスキームを用いているsubmodule取得に失敗する</h4>

<p>SSH鍵の関係で、gitスキームを用いているsubmoduleの取得に失敗する。<br>
なのでgitを用いてる部分はhttpsに無理やり書き換えている。以下の部分である。<br>
涙ぐましい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Use sed to replace the SSH URL with the public URL, then initialize submodules
</span><span class='line'>    - sed -i 's/git@github.com:/https:\/\/github.com\//' .gitmodules</span></code></pre></td></tr></table></div></figure>

<h4 id="環境変数設定を頑張る">環境変数設定を頑張る</h4>

<p>cocos2d設定の過程で<code>setup.py</code>を実行するところがあるが、こいつは<code>.bashrc</code>を書き換える。<br>
<code>.bashrc</code>内に<code>export</code>文がいくつか追加される。本来、<code>source ~/.bashrc</code>等とやれば環境変数が有効になるのであるが、、、<br>
Travis CIのScript上では効かないので、しかたなく<code>.bashrc</code>に追記されるものと同等の設定を<code>.travis.yml</code>にて実施した。<br>
以下の部分である。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- export COCOS_CONSOLE_ROOT=`pwd`/tools/cocos2d-console/bin
</span><span class='line'>- export PATH=$PATH:$COCOS_CONSOLE_ROOT
</span><span class='line'>- export COCOS_TEMPLATES_ROOT=`pwd`/templates
</span><span class='line'>- export PATH=$PATH:$COCOS_TEMPLATES_ROOT
</span><span class='line'>- export ANT_ROOT=/usr/share/ant/bin
</span><span class='line'>- export PATH=$PATH:$ANT_ROOT</span></code></pre></td></tr></table></div></figure>

<p>ここまでいくと、Travis CI上で<code>cocos</code>コマンドが使えるようになる。<br>
<code>cocos compile -p android -j 8</code>でビルド実行。APKが生成される（デバッグ版）はずである。</p>

<p>成果物がでてくるところまできたので、Travis CIの設定はひとまず以上とした。<br>
おかげさまで、リポジトリにTravis CIバッヂを貼ることができた。</p>

<p><a href="https://github.com/pankona/KonaReflection">https://github.com/pankona/KonaReflection</a></p>

<h4 id="deploygateさんへのデプロイは">DeployGateさんへのデプロイは</h4>

<p>ビルド成功の後、curlコマンドでAPKをDeployGateさんへ送信すればいい模様。<br>
できたらまた躓きポイントを載せていこうと思う。<br>
追記：DeployGateさんへのアップロードについては<a href="http://pankona.github.io/blog/2015/04/22/travis-ci-with-deploygate/">次回記事</a>も見てね。</p>

<p>今回はここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocos2d-xをやってみている]]></title>
    <link href="http://pankona.github.io/blog/2015/03/11/cocos2d-initial/"/>
    <updated>2015-03-11T11:29:27+00:00</updated>
    <id>http://pankona.github.io/blog/2015/03/11/cocos2d-initial</id>
    <content type="html"><![CDATA[<p>2015.03.07に娘が生まれました。<br>
これからも頑張ります。近況を記す。</p>

<h3 id="cocos2d-xを始めてみたのである">cocos2d-xを始めてみたのである</h3>

<p>昨年末からあまりRaspberry Piを触れない環境におかれていたもので、<br>
何か手軽にプログラミングをエンジョイできないかと思って、探して見た結果がcocos2d-x。<br>
Unityじゃなくてcocos2d-xにしたのは、Linux向けの開発環境があるからである。<br>
Unityやってみたかったけど、LinuxでやりたかったらWineを使え、みたいな感じになっているようで、<br>
そんなことこっちから願い下げだ、ということで、cocos2d-x。<br>
C++で書けて、これから触ってみようと思っているLuaとも相性がいい様子で、願ったり叶ったりである。</p>

<h3 id="いま作っているもの">いま作っているもの</h3>

<p>なかなか始めてみると面白い。<br>
とりあえずわかりやすいところから馴染んでいこうということで、<br>
ブロック崩しを題材にして制作に励んでいるところ。リポジトリはこちら。<br>
<a href="https://github.com/pankona/KonaReflection">KonaReflection</a><br>
プロジェクト名は3日程真剣に考えた挙句これである。</p>

<p>開発環境は、愛機のVaio Pro 13（Arch Linux）と職場Mac Book Proの両刀で実践中。<br>
デプロイターゲットはLinux、Mac（いずれもデバッグ目的）、そしてAndroid。<br>
※ 職場MBPを使っているが、ちゃんと仕事はしている。暇なときにやっている。</p>

<p>どこまで作るかという話もあるが、とりあえず誰かを楽しませることが出来るレベルまで作ろうかと思う。<br>
せっかく作るなら、一応、体としてはやりきりたいではないか。</p>

<h3 id="longest-streakを13に伸ばす">Longest Streakを13に伸ばす</h3>

<p>なんやかやあって途絶えてしまったが、Longest Streakは13まで更新した。<br>
そんなもん伸ばして何になるの、というのもわかるが、ちょっとでも、毎日ソース更新しなきゃ、という気持ちになるのであれば、<br>
意味がなくもないんじゃないかと思いつつ。また仕切りなおして伸ばしていこう。</p>

<h3 id="cocos2d-xを使ったアプリをeclipseで開発できるようにした">cocos2d-xを使ったアプリをEclipseで開発できるようにした</h3>

<p>Android向け、という話ではそこそこ記事があるが、ことLinux向けで開発環境構築というと記事がなかなかない。<br>
しかし出来るようになった。Eclipse＋CDT＋諸々設定（←ここがめんどい）。<br>
設定方法は別の記事としてまとめようと思う。cocos2d-x＋Eclipse＋Linux向けビルド、の体。</p>

<h3 id="vimでも開発できるように調整した">vimでも開発できるように調整した</h3>

<p>いっときEclipseを用いてcocos2d-xの開発環境を作ることを諦めかけた（めんどすぎた）のだが、<br>
そのとき、Vimだけでやれるように開発環境構築を頑張ってみたのである。<br>
割といい具合になったのでこっちもそのうち記事にしてみようと思う。<br>
Vim＋Syntastic＋NeoComplete＋Clang_Complete、といった組み合わせである。<br>
だけどまあ結局はEclipseを使いそうである。事足りてしまうし、むしろvrapperがあればそこそこ快適である。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[月間300ヒットを達成していた]]></title>
    <link href="http://pankona.github.io/blog/2015/01/28/300hot-per-month/"/>
    <updated>2015-01-28T12:44:18+00:00</updated>
    <id>http://pankona.github.io/blog/2015/01/28/300hot-per-month</id>
    <content type="html"><![CDATA[<p>12月のことであるが、実は月間300ヒットを達成していた。<br>
うち250ヒットは自分の手によるもの、、、とかそういうことではなく、<br>
概ね自分以外の方々によって、月間300ヒットを達成できたのである。<br>
300ヒット。たかが300ヒット。されど300ヒット。 一日平均10人。</p>

<p>これからもほそぼそ、ぼちぼち、書いていこうと思う。<br>
学んだことをアウトプットするのが大事だと誰か偉い人も言っておった。私もそう思う。<br>
書いたことによって、誰かひとりでも何かの助けになればと願いつつ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Piでログインを自動化、ついでに現在のIP表示させてみる]]></title>
    <link href="http://pankona.github.io/blog/2015/01/28/raspi-autologin/"/>
    <updated>2015-01-28T12:10:39+00:00</updated>
    <id>http://pankona.github.io/blog/2015/01/28/raspi-autologin</id>
    <content type="html"><![CDATA[<p>しばらく愛用のVaio Proをいじる時間がとれなかったもんで、新しい記事をポストできずにおった。<br>
実におよそ2ヶ月ぶりの新規記事。新年あけましておめでとうございます。<br>
今年もぼちぼちでやっていきます。目指せ100記事。</p>

<h3 id="raspberry-pi起動時に、pitftにipアドレスを表示させる">Raspberry Pi起動時に、PiTFTにIPアドレスを表示させる</h3>

<p>いま自分のとこで扱っているRaspberry Piは、基本的に画面を接続せず、操作はネットワーク越し（SSH）に行う前提にしている。<br>
そのため、SSHによるログインにあたってはRaspberry PiのIPアドレスを知る等してネットワーク的にリーチする必要がある。</p>

<p>いままではarpをしてみたりpingをブロードキャストに投げてみたり、ホストネームを打ってみたり、色々やっていたのであるが、<br>
いまひとつうまく行かないことがあって、そのたびにトラブルシューティングのために、結局画面を接続する必要が生じていた。<br>
実に間抜け感を感じるわけである。</p>

<p>PiTFTをくっつけた、というのはちょっと前の記事で書いたところなのであるが、<br>
じゃあとりあえず、Raspberry Pi起動時にこいつに現在のIPアドレスを出力してみれば便利なのでは、と思ったのである。<br>
IPアドレスさえわかれば、だいたいにおいてSSH接続できるしね。</p>

<p>方法は、<br>
* 自動でログインさせる<br>
* ログイン時にifconfigし、IPアドレスの部分を抽出しつつ、コンソール（PiTFT）出力<br>
といった感じ。以下、詳細。</p>

<h3 id="自動ログインさせる">自動ログインさせる</h3>

<p>ちなみに私が扱っているRaspberry PiにはArch Linuxが載っている。<br>
Raspbian、Pidora等とは設定が違うと思われるので注意されたし。<br>
Arch Linuxなので、現在のところ起動時の仕組みはSystemdが用いられている。</p>

<p>Systemdにおける自動ログインの設定は、例によってArch Wikiに載っていたのでそれを参照した。<br>
ここを参照。→  <a href="https://wiki.archlinux.org/index.php/Automatic_login_to_virtual_console_(%E6%97%A5%E6%9C%AC%E8%AA%9E)%5Dx">Automatic login to virtual console</a><br>
仮想コンソールの章を、騙されたと思ってそのまま設定し、そんで再起動してやればもう自動ログインできているはずである。</p>

<h3 id="ログイン時にifconfigし、ipアドレス部分を抽出">ログイン時にifconfigし、IPアドレス部分を抽出</h3>

<p>自動ログインできたらあとは簡単で、.bashrcにでもIPアドレス出力用の何かを書いてあげればOKである。</p>

<figure class='code'><figcaption><span>.bashrc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ifconfig | grep inet</span></code></pre></td></tr></table></div></figure>

<p>これでいいや、という感じで書いておいた。</p>

<p>ただ、起動と同時に自動ログイン → IPアドレス表示、だと、IPを取れてないことがあって具合が良くない。<br>
そのため、上記IPアドレス取得の前に、ちょっとだけsleepなんかを入れてあげるとそのへんは心配がなくなる。</p>

<figure class='code'><figcaption><span>.bashrc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sleep 5
</span><span class='line'>ifconfig | grep inet</span></code></pre></td></tr></table></div></figure>

<p>こんな具合である。</p>

<h3 id="ipアドレスがわかるようになったがpitftがもったいない感">IPアドレスがわかるようになったがPiTFTがもったいない感</h3>

<p>PiTFTだとちょっとやりすぎなので、もっと小さい画面モジュールでやってもいいと思う。<br>
というか早く無線化しようね。次の目標は無線化です。それでは。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Piにて、リモートからLチカさせてみた]]></title>
    <link href="http://pankona.github.io/blog/2014/11/25/remote-ltika/"/>
    <updated>2014-11-25T13:16:43+00:00</updated>
    <id>http://pankona.github.io/blog/2014/11/25/remote-ltika</id>
    <content type="html"><![CDATA[<p>Raspberry Piをリモートから制御する第一歩として、<br>
ネットワーク越しに、AndroidアプリからLチカさせてみる、をやってみた。<br>
いまのところ実にしょうもないレベルであるが、最初は誰もがしょうもなかったと言い聞かせつつ、<br>
やったことを公開しつつ、どんなあんばいだったか記録しておこうと思う。<br>
ちなみに、ここでいっているLEDとは、Raspberry Piボード上のLED &quot;ACT&quot; を指している。<br>
ブレッドボードやらそういった類の何かは使っていない。</p>

<h3 id="構成">構成</h3>

<ul>
<li>Raspberry Pi （OSはArch Linux） 有線LAN接続

<ul>
<li>Railsが動いていて、REST APIを公開している。</li>
<li>REST APIを叩くことで、LEDのON/OFFを制御するスクリプトが動作し、Lチカを実現する。</li>
</ul></li>
<li>Androidアプリ

<ul>
<li>ボタンが2個ついてるだけの超絶シンプルアプリ</li>
<li>ONボタンを押すとLEDを点けるほうのREST APIを叩きにいく。</li>
<li>同様に、OFFボタンを押すとLEDを消すREST APIを叩きにいく。</li>
<li>対向機のIPアドレスはまさかのハードコーディング。</li>
</ul></li>
</ul>

<h3 id="ソースコード">ソースコード</h3>

<ul>
<li>Raspberry Pi側のソースコードは<a href="https://github.com/pankona/raspi_remote_blink">こちら</a>。Railsアプリ。</li>
<li>Android側のアプリは後ほどアップロード（手元になかった）。</li>
</ul>

<h3 id="今後に向けてメモ">今後に向けてメモ</h3>

<ul>
<li>Railsアプリは、スクリプトへのパスがハードコードされていたりしてだいぶ恥ずかしいので、そのうち直す。</li>
<li>というかファイルI/OすればLチカできることがわかったので、もはやスクリプトを使う必要はなかった。そのうち直す。</li>
<li>応用して、自動草花への水やり機の作成を目論んでおく。できたら画像と共にアップロードしよう。</li>
<li>カメラと合わせて、水やりしつつ、草の成長記録をツイッターに投稿する、というのもいいかもしれない。</li>
<li>ツイッター越しに命令（水やり、写真撮影、等）を発行できるようにしてもいいかもしれない。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressカスタマイズで読書メーターのブログパーツを追加]]></title>
    <link href="http://pankona.github.io/blog/2014/10/01/dokusho-meter/"/>
    <updated>2014-10-01T13:41:26+00:00</updated>
    <id>http://pankona.github.io/blog/2014/10/01/dokusho-meter</id>
    <content type="html"><![CDATA[<p>たまにはブログのカスタマイズをしてみる。<br>
今回は読書メーターのブログパーツを追加してみた。</p>

<p>サイドバーに「最近読んだ本」なんてのが現れるようにしてみた。<br>
文字ばっかだったブログにちょっと賑やかし感があって良い。</p>

<p>例によって備忘録的にやり方を残しておく。<br>
Octopressに読書メーターのブログパーツを追加する方法。</p>

<h3 id="読書メーターのアカウントを取得する">読書メーターのアカウントを取得する</h3>

<p><a href="http://book.akahoshitakuya.com/">読書メーターのウェブページ</a>からどうぞ。</p>

<h3 id="ブログパーツを選ぶ">ブログパーツを選ぶ</h3>

<p>読書メーターにログイン後、マイページに行ってみると、<br>
<strong>「ブログパーツ」</strong>と書いてあるところがある。<br>
そこを見ると各種ブログパーツを見つけることが出来る。</p>

<h3 id="octopressをカスタマイズして、サイドバーに出るように">Octopressをカスタマイズして、サイドバーに出るように</h3>

<p>ここからはOctopress側の編集。</p>

<h4 id="読書メーター用のhtmlを書く。">読書メーター用のHTMLを書く。</h4>

<p>中身は上記ブログパーツの内容をコピペしたものだが。<br>
ブログパーツとして「最近読んだ本」をチョイス。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section&gt;
</span><span class='line'>&lt;a href="http://book.akahoshitakuya.com/u/{人によって違うID}" title="{人の名前}の最近読んだ本"&gt;&lt;img src="http://img.bookmeter.com/bp_image/640/509/{人によって違うID}.jpg" border="0" alt="{人の名前}の最近読んだ本"&gt;&lt;/a&gt;
</span><span class='line'>&lt;/section&gt;</span></code></pre></td></tr></table></div></figure>

<h4 id="_config.ymlを編集して、サイドバーにパーツを追加">_config.ymlを編集して、サイドバーにパーツを追加</h4>

<p>_config.ymlのdefault_asidesを変更。読書メーター用HTMLファイルを指定。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default_asides: [custom/asides/about.html, asides/recent_posts.html, asides/github.html, asides/delicious.html, 
</span><span class='line'>                 asides/pinboard.html, asides/googleplus.html, custom/asides/tag_cloud.html, custom/asides/category_list.html,
</span><span class='line'>                 custom/asides/dokusho_meter.html]</span></code></pre></td></tr></table></div></figure>

<h4 id="deployしたら完了">deployしたら完了</h4>

<p><code>bundle exec rake gen_deploy</code> 的なことをやってデプロイする。</p>

<h3 id="ここまでで">ここまでで</h3>

<p>最近読んだ本がサイドバーに表示されるように。<br>
ITっぽい本を並べたりすると、なんとなく技術的なブログな雰囲気が出て、<br>
とてもいいんではないでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二本指スワイプに戻る／進むを割り当てる方法 for Firefox on Arch Linux]]></title>
    <link href="http://pankona.github.io/blog/2014/09/14/histryback-by-swipe-on-firefox/"/>
    <updated>2014-09-14T15:30:08+00:00</updated>
    <id>http://pankona.github.io/blog/2014/09/14/histryback-by-swipe-on-firefox</id>
    <content type="html"><![CDATA[<p>ブラウザはFirefoxを好んで使っている。<br>
VimperatorとかPentadactylがあるおかげである。</p>

<p>いままで放置していた問題があって、それは二本指スワイプの挙動設定。</p>

<p>二本指で左右にスワイプしたときに、ヒストリーバック・ヒストリーフォワード、<br>
いわゆる「戻る」「進む」をやってほしいんだけど、これの設定がいまいちわからず、放置していた。<br>
ようやく設定方法がわかったので記しておく。そっこー忘れそうであるので。</p>

<p>ちなみに、「on Arch Linux」と題しているが、おそらくArchに限らないLinux全般の話ではないかと想像。<br>
UbuntuとArch Linux、どちらのFirefoxでもデフォルト設定では横方向二本指スワイプが仕事をしてくれなかったので。</p>

<p>では、以下設定手順。</p>

<h2 id="synclientの確認と設定">synclientの確認と設定</h2>

<p>そもそもタッチパッドのドライバーレベルで横方向スクロールが無効になっている可能性がある。というかなってた。<br>
なので、確認方法と設定変更方法。</p>

<h4 id="synclientコマンドを打って水平方向二本指スクロールの設定を確認する">synclientコマンドを打って水平方向二本指スクロールの設定を確認する</h4>

<p>以下のコマンドで現在の設定を確認できる。</p>

<p><code>$ synclient</code></p>

<p>ずらずらっと出てくる内容のうち、<code>HorizTwoFingerScroll</code> が確認対象の項目。<br>
値が「0」だったら無効になっている。有効にしない限り、いくら頑張って横スワイプしても効かない。</p>

<h4 id="synclientコマンドで水平方向二本指スクロールを有効にする">synclientコマンドで水平方向二本指スクロールを有効にする</h4>

<p>上の確認で有効だったらここは飛ばしてOK。無効だった場合、有効にするのは以下のコマンド。</p>

<p><code>$ synclient HorizTwoFingerScroll=1</code></p>

<p>synclientのほうはこれでOK。</p>

<h2 id="firefoxの設定">Firefoxの設定</h2>

<p>さらにFirefoxの設定を変えてやる必要がある。<br>
設定内容は<a href="https://wiki.archlinux.org/index.php/Touchpad_Synaptics">Touchpad Synaptics - Arch Linux Wiki</a>、Firefox 17.0 and laterの項を参考にした。</p>

<p>about:configを開く。設定内容は以下。</p>

<h4 id="マウスホイールのアクションを変更する">マウスホイールのアクションを変更する</h4>

<p><code>mousewheel.default.action.override_x = 2</code> とした。<br>
あんまりよく調べていないが、「2」が戻るアクションに対応している数字らしい。</p>

<h4 id="スワイプ方向を逆にする">スワイプ方向を逆にする</h4>

<p>デフォルトでは、左スワイプが「進む」、右スワイプが「戻る」になっている。<br>
逆な気がする。設定してこれを逆転させる。</p>

<p><code>mousewheel.default.delta_multiplier_x = -100</code> とした。</p>

<h4 id="感度を落とす">感度を落とす</h4>

<p>デフォルトではものすごく感度がよい。<br>
良すぎてしまって縦スワイプがちょっと横にぶれただけで戻ったり進んだりする。<br>
やりにくいので感度を落とす。</p>

<p><code>mousewheel.default.delta_multiplier_x = -10</code> とした。</p>

<h2 id="ここまでやって">ここまでやって</h2>

<p>とりあえず望む形（二本指で左スワイプで戻る、右スワイプで進む）に設定できた。結構ハードルあった。。<br>
ちなみにこれ、Mac OS向けFirefoxならデフォルトの挙動な模様。何の差なのか。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PiTFTのタッチパネルを動作させる]]></title>
    <link href="http://pankona.github.io/blog/2014/07/23/raspi-touch-panel/"/>
    <updated>2014-07-23T12:54:58+00:00</updated>
    <id>http://pankona.github.io/blog/2014/07/23/raspi-touch-panel</id>
    <content type="html"><![CDATA[<p>前回に引き続き、PiTFTの話題。</p>

<p>前回でPiTFTにコンソール画面だったりXの画面だったりを出力させるところまでいった。<br>
タッチパネルの設定がまだだったので、手順を簡単に記しておく。</p>

<p>例によって、Raspberry PiにはArch Linuxが載っている前提。</p>

<h3 id="タッチパネルのドライバーをロードする">タッチパネルのドライバーをロードする</h3>

<p>前回、FBTFTがビルトインされているカーネルを以下のコマンドでインストールした。</p>

<p><code>$ sudo -E REPO_URI=https://github.com/notro/rpi-firmware BRANCH=builtin rpi-update</code></p>

<p>これが正しく入っていれば、タッチパネルのドライバもカーネルに含まれているはず。<br>
ただし、画面に何かを表示させる時と異なり、手動でドライバをロードする必要がある。</p>

<p>以下のコマンドで、タッチパネルのドライバをロードする。</p>

<p>@@@@ 忘れたのであとで追記する @@@@</p>

<p>基本的にはこれだけで動作すると思われる。<br>
例によって<a href="https://github.com/notro/fbtft/wiki">notroさんのところのWiki</a>に載っている内容だが、<br>
notroさんのところは充実しすぎて逆に迷う気がするので、備忘録的に残しておくことにする。。</p>

<h3 id="動いているか確かめる方法">動いているか確かめる方法</h3>

<p>evtestを用いて確かめられる。<br>
evtestを起動したのちにタッチパネルをぐりぐり触ってみると、<br>
タッチイベントの詳細がコンソールに出力される。</p>

<p>また、正常にドライバがロードされると、<code>/dev/input/touchpanel</code>なるファイルが現れるはずである。<br>
ちなみにこれはeventXへのシンボリックリンクになっている。<br>
このファイルの有無でもドライバのロードが正しく行われたか判断できると思われる。</p>

<h3 id="要追記事項">要追記事項</h3>

<ul>
<li>ドライバロードのコマンドをちゃんと確認する。</li>
<li>キャリブレーション（回転した画面への対応）の方法。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PiTFTをArch Linux on Raspberry Piで動かすのに苦戦]]></title>
    <link href="http://pankona.github.io/blog/2014/07/17/pitft-on-arch-linux/"/>
    <updated>2014-07-17T12:11:11+00:00</updated>
    <id>http://pankona.github.io/blog/2014/07/17/pitft-on-arch-linux</id>
    <content type="html"><![CDATA[<p><strong>2014/07/23/Wed 追記</strong></p>

<p>以下のポストに誤りがあることがわかったので、訂正。<br>
誤っている部分には打ち消し線を入れておく。</p>

<hr>

<p><a href="http://www.adafruit.com/products/1601">PiTFT</a>を購入。<br>
さっそくRaspberry Piで動かそうとしてみたところ、これがなかなかうまくいかず。<br>
3日程粘ってようやく動いた。やり方を記載しておく。</p>

<p>Raspberry Piには、Arch Linuxが載っている前提です。</p>

<h3 id="参考になるページ">参考になるページ</h3>

<p><a href="https://github.com/notro/fbtft/wiki">notroさんのfbtftに関するWiki</a>。本当に感謝。Great。<br>
ただ、ここに書いてある手順を踏んだだけではうまく動かなかった。<br>
以下、顛末と動かすまでの手順。</p>

<h4 id="rpi-updateが使える状態にする">rpi-updateが使える状態にする</h4>

<p>以下、Raspberry Pi上でのコマンド入力。<br>
以下のコマンドでrpi-updateを取得＆実行可能権限付与。</p>

<p><code>$ wget https://raw.github.com/Hexxeh/rpi-update/master/rpi-update</code><br>
<code>$ chmod +x ./rpi-update</code></p>

<p>rpi-updateは適当な場所に移しておく。パスが通っているところに置いておくと便利。<br>
以下、rpi-updateがある場所にパスが通っている前提で記載。</p>

<h3 id="rpi-updateを使ってkernelをアップデート">rpi-updateを使ってKernelをアップデート</h3>

<p>FBTFTドライバがビルトインされているとされるバージョンにしてみる。</p>

<p><code>$ sudo -E REPO_URI=https://github.com/notro/rpi-firmware BRANCH=builtin rpi-update</code></p>

<p>なんやかや起こったあと、リブート。</p>

<p><code>$ sudo reboot</code></p>

<p>これでFBTFTドライバが準備オッケーになっているはず、なのだが…？</p>

<h3 id="fbtft_deviceがない"><del>fbtft_deviceがない</del></h3>

<p><del>fbtft_deviceを有効にするために、modprobeしてみる。</del></p>

<p><code>$ sudo modprobe fbtft_device name=adafruit22</code></p>

<p><del>すると帰ってきた答えは、</del></p>

<p><code>FATAL: Module fbtft_device not found.</code></p>

<p><del>とのこと。実際に探してみたところ、fbtft_device.koというモジュールは存在していない様子。</del></p>

<hr>

<p><strong>2014/07/23/Wed 訂正</strong></p>

<p>結論から言うと上記の挙動であっていた。<br>
<code>BRANCH=builtin</code>を選択した場合はfbtft_deviceがloadableなモジュールとして現れない、<br>
つまり modprobe で見つからないと言われるのは正しかった。</p>

<p>上記の状態で、あとは /boot/cmdline.txt に然るべき内容を追記するだけでOK。<br>
その後PiTFTを接続し、Raspberry Piを再起動すれば画面に何か映るはず。</p>

<p>よって以下の手順はすべて無駄であるが、<br>
以下の手順が誤りであることを示すために残しておく。。</p>

<p>以下、無駄な手順メモ。全く不要。</p>

<hr>

<h3 id="いろいろやってfbtft_deviceを用意する"><del>いろいろやってfbtft_deviceを用意する</del></h3>

<p><del>fbtft_deviceを求めて色々さまよったところ、上述のKernelアップデートの際に、</del></p>

<p><code>sudo REPO_URI=https://github.com/notro/rpi-firmware rpi-update</code></p>

<p><del>とビルトインではなく、loadable moduleとしてfbtft_deviceが現れるやつをチョイスしてみたところ、</del><br>
<code>sudo modprobe fbtft_device name=adafruit22</code>がnot foundではなく、別のエラーになった。<br>
<del>探してみたところ、実際にモジュールは存在した。ただし正常にmodprobeできていない。</del></p>

<p><del>FBTFTのモジュールは、</del><br>
<code>/lib/modules/$(uname -r)/kernel/video/fbtft</code><br>
<del>に置かれている。これをどこか別の場所にコピーしておく。後々使う。</del></p>

<h3 id="rpi-updateを使ってfbtftビルトインバージョンに戻す"><del>rpi-updateを使ってFBTFTビルトインバージョンに戻す</del></h3>

<p><del>上で一回やってるやつをやって、FBTFTビルトインバージョンのKernelに戻す。</del></p>

<p><code>$ sudo -E REPO_URI=https://github.com/notro/rpi-firmware BRANCH=builtin rpi-update</code><br>
<code>$ sudo reboot</code></p>

<h3 id="戻したのち、コピーしておいたfbtftを所定の位置に戻す"><del>戻したのち、コピーしておいたfbtftを所定の位置に戻す</del></h3>

<p><code>/lib/modules/$(uname -r)/kernel/video/fbtft</code>~~の位置に戻す。~~</p>

<h3 id="depmodする。"><del>depmodする。</del></h3>

<p><code>sudo depmod -a</code></p>

<h3 id="fbtft_deviceをmodprobeする"><del>fbtft_deviceをmodprobeする</del></h3>

<p><del>not foundとは言われなくなり、ちゃんとロードされる。はず。</del></p>

<h3 id="あとはnotroさんのところの手順に従う">あとはnotroさんのところの手順に従う</h3>

<p>/boot/cmdline.txtであるとか、もろもろ変更する。<br>
PiTFTはきっと動き出す。</p>
]]></content>
  </entry>
  
</feed>
