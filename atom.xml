<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[make clean; make]]></title>
  <link href="http://pankona.github.io/atom.xml" rel="self"/>
  <link href="http://pankona.github.io/"/>
  <updated>2014-10-06T09:55:05+09:00</updated>
  <id>http://pankona.github.io/</id>
  <author>
    <name><![CDATA[pankona]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopressカスタマイズで読書メーターのブログパーツを追加]]></title>
    <link href="http://pankona.github.io/blog/2014/10/01/dokusho-meter/"/>
    <updated>2014-10-01T22:41:26+09:00</updated>
    <id>http://pankona.github.io/blog/2014/10/01/dokusho-meter</id>
    <content type="html"><![CDATA[<p>たまにはブログのカスタマイズをしてみる。<br>
今回は読書メーターのブログパーツを追加してみた。</p>

<p>サイドバーに「最近読んだ本」なんてのが現れるようにしてみた。<br>
文字ばっかだったブログにちょっと賑やかし感があって良い。</p>

<p>例によって備忘録的にやり方を残しておく。<br>
Octopressに読書メーターのブログパーツを追加する方法。</p>

<h3 id="読書メーターのアカウントを取得する">読書メーターのアカウントを取得する</h3>

<p><a href="http://book.akahoshitakuya.com/">読書メーターのウェブページ</a>からどうぞ。</p>

<h3 id="ブログパーツを選ぶ">ブログパーツを選ぶ</h3>

<p>読書メーターにログイン後、マイページに行ってみると、<br>
<strong>「ブログパーツ」</strong>と書いてあるところがある。<br>
そこを見ると各種ブログパーツを見つけることが出来る。</p>

<h3 id="octopressをカスタマイズして、サイドバーに出るように">Octopressをカスタマイズして、サイドバーに出るように</h3>

<p>ここからはOctopress側の編集。</p>

<h4 id="読書メーター用のhtmlを書く。">読書メーター用のHTMLを書く。</h4>

<p>中身は上記ブログパーツの内容をコピペしたものだが。<br>
ブログパーツとして「最近読んだ本」をチョイス。</p>

<figure class='code'><figcaption><span>source/_includes/custom/asides/dokusho_meter.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://book.akahoshitakuya.com/u/{人によって違うID}&quot;</span> <span class="na">title=</span><span class="s">&quot;{人の名前}の最近読んだ本&quot;</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://img.bookmeter.com/bp_image/640/509/{人によって違うID}.jpg&quot;</span> <span class="na">border=</span><span class="s">&quot;0&quot;</span> <span class="na">alt=</span><span class="s">&quot;{人の名前}の最近読んだ本&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<h4 id="_config.ymlを編集して、サイドバーにパーツを追加">_config.ymlを編集して、サイドバーにパーツを追加</h4>

<p>_config.ymlのdefault_asidesを変更。読書メーター用HTMLファイルを指定。</p>

<figure class='code'><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>default_asides: [custom/asides/about.html, asides/recent_posts.html, asides/github.html, asides/delicious.html,
</span><span class='line'>                 asides/pinboard.html, asides/googleplus.html, custom/asides/tag_cloud.html, custom/asides/category_list.html,
</span><span class='line'>                 custom/asides/dokusho_meter.html]
</span></code></pre></td></tr></table></div></figure>

<h4 id="deployしたら完了">deployしたら完了</h4>

<p><code>bundle exec rake gen_deploy</code> 的なことをやってデプロイする。</p>

<h3 id="ここまでで">ここまでで</h3>

<p>最近読んだ本がサイドバーに表示されるように。<br>
ITっぽい本を並べたりすると、なんとなく技術的なブログな雰囲気が出て、<br>
とてもいいんではないでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二本指スワイプに戻る／進むを割り当てる方法 for Firefox on Arch Linux]]></title>
    <link href="http://pankona.github.io/blog/2014/09/15/histryback-by-swipe-on-firefox/"/>
    <updated>2014-09-15T00:30:08+09:00</updated>
    <id>http://pankona.github.io/blog/2014/09/15/histryback-by-swipe-on-firefox</id>
    <content type="html"><![CDATA[<p>ブラウザはFirefoxを好んで使っている。<br>
VimperatorとかPentadactylがあるおかげである。</p>

<p>いままで放置していた問題があって、それは二本指スワイプの挙動設定。</p>

<p>二本指で左右にスワイプしたときに、ヒストリーバック・ヒストリーフォワード、<br>
いわゆる「戻る」「進む」をやってほしいんだけど、これの設定がいまいちわからず、放置していた。<br>
ようやく設定方法がわかったので記しておく。そっこー忘れそうであるので。</p>

<p>ちなみに、「on Arch Linux」と題しているが、おそらくArchに限らないLinux全般の話ではないかと想像。<br>
UbuntuとArch Linux、どちらのFirefoxでもデフォルト設定では横方向二本指スワイプが仕事をしてくれなかったので。</p>

<p>では、以下設定手順。</p>

<h2 id="synclientの確認と設定">synclientの確認と設定</h2>

<p>そもそもタッチパッドのドライバーレベルで横方向スクロールが無効になっている可能性がある。というかなってた。<br>
なので、確認方法と設定変更方法。</p>

<h4 id="synclientコマンドを打って水平方向二本指スクロールの設定を確認する">synclientコマンドを打って水平方向二本指スクロールの設定を確認する</h4>

<p>以下のコマンドで現在の設定を確認できる。</p>

<p><code>$ synclient</code></p>

<p>ずらずらっと出てくる内容のうち、<code>HorizTwoFingerScroll</code> が確認対象の項目。<br>
値が「0」だったら無効になっている。有効にしない限り、いくら頑張って横スワイプしても効かない。</p>

<h4 id="synclientコマンドで水平方向二本指スクロールを有効にする">synclientコマンドで水平方向二本指スクロールを有効にする</h4>

<p>上の確認で有効だったらここは飛ばしてOK。無効だった場合、有効にするのは以下のコマンド。</p>

<p><code>$ synclient HorizTwoFingerScroll 1</code></p>

<p>synclientのほうはこれでOK。</p>

<h2 id="firefoxの設定">Firefoxの設定</h2>

<p>さらにFirefoxの設定を変えてやる必要がある。<br>
設定内容は<a href="https://wiki.archlinux.org/index.php/Touchpad_Synaptics">Touchpad Synaptics - Arch Linux Wiki</a>、Firefox 17.0 and laterの項を参考にした。</p>

<p>about:configを開く。設定内容は以下。</p>

<h4 id="マウスホイールのアクションを変更する">マウスホイールのアクションを変更する</h4>

<p><code>mousewheel.default.action.override_x = 2</code> とした。<br>
あんまりよく調べていないが、「2」が戻るアクションに対応している数字らしい。</p>

<h4 id="スワイプ方向を逆にする">スワイプ方向を逆にする</h4>

<p>デフォルトでは、左スワイプが「進む」、右スワイプが「戻る」になっている。<br>
逆な気がする。設定してこれを逆転させる。</p>

<p><code>mousewheel.default.delta_multiplier_x = -100</code> とした。</p>

<h4 id="感度を落とす">感度を落とす</h4>

<p>デフォルトではものすごく感度がよい。<br>
良すぎてしまって縦スワイプがちょっと横にぶれただけで戻ったり進んだりする。<br>
やりにくいので感度を落とす。</p>

<p><code>mousewheel.default.delta_multiplier_x = -10</code> とした。</p>

<h2 id="ここまでやって">ここまでやって</h2>

<p>とりあえず望む形（二本指で左スワイプで戻る、右スワイプで進む）に設定できた。結構ハードルあった。。<br>
ちなみにこれ、Mac OS向けFirefoxならデフォルトの挙動な模様。何の差なのか。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PiTFTのタッチパネルを動作させる]]></title>
    <link href="http://pankona.github.io/blog/2014/07/23/raspi-touch-panel/"/>
    <updated>2014-07-23T21:54:58+09:00</updated>
    <id>http://pankona.github.io/blog/2014/07/23/raspi-touch-panel</id>
    <content type="html"><![CDATA[<p>前回に引き続き、PiTFTの話題。</p>

<p>前回でPiTFTにコンソール画面だったりXの画面だったりを出力させるところまでいった。<br>
タッチパネルの設定がまだだったので、手順を簡単に記しておく。</p>

<p>例によって、Raspberry PiにはArch Linuxが載っている前提。</p>

<h3 id="タッチパネルのドライバーをロードする">タッチパネルのドライバーをロードする</h3>

<p>前回、FBTFTがビルトインされているカーネルを以下のコマンドでインストールした。</p>

<p><code>$ sudo -E REPO_URI=https://github.com/notro/rpi-firmware BRANCH=builtin rpi-update</code></p>

<p>これが正しく入っていれば、タッチパネルのドライバもカーネルに含まれているはず。<br>
ただし、画面に何かを表示させる時と異なり、手動でドライバをロードする必要がある。</p>

<p>以下のコマンドで、タッチパネルのドライバをロードする。</p>

<p>@@@@ 忘れたのであとで追記する @@@@</p>

<p>基本的にはこれだけで動作すると思われる。<br>
例によって<a href="https://github.com/notro/fbtft/wiki">notroさんのところのWiki</a>に載っている内容だが、<br>
notroさんのところは充実しすぎて逆に迷う気がするので、備忘録的に残しておくことにする。。</p>

<h3 id="動いているか確かめる方法">動いているか確かめる方法</h3>

<p>evtestを用いて確かめられる。<br>
evtestを起動したのちにタッチパネルをぐりぐり触ってみると、<br>
タッチイベントの詳細がコンソールに出力される。</p>

<p>また、正常にドライバがロードされると、<code>/dev/input/touchpanel</code>なるファイルが現れるはずである。<br>
ちなみにこれはeventXへのシンボリックリンクになっている。<br>
このファイルの有無でもドライバのロードが正しく行われたか判断できると思われる。</p>

<h3 id="要追記事項">要追記事項</h3>

<ul>
<li>ドライバロードのコマンドをちゃんと確認する。</li>
<li>キャリブレーション（回転した画面への対応）の方法。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PiTFTをArch Linux on Raspberry Piで動かすのに苦戦]]></title>
    <link href="http://pankona.github.io/blog/2014/07/17/pitft-on-arch-linux/"/>
    <updated>2014-07-17T21:11:11+09:00</updated>
    <id>http://pankona.github.io/blog/2014/07/17/pitft-on-arch-linux</id>
    <content type="html"><![CDATA[<p><strong>2014/07/23/Wed 追記</strong></p>

<p>以下のポストに誤りがあることがわかったので、訂正。<br>
誤っている部分には打ち消し線を入れておく。</p>

<hr>

<p><a href="http://www.adafruit.com/products/1601">PiTFT</a>を購入。<br>
さっそくRaspberry Piで動かそうとしてみたところ、これがなかなかうまくいかず。<br>
3日程粘ってようやく動いた。やり方を記載しておく。</p>

<p>Raspberry Piには、Arch Linuxが載っている前提です。</p>

<h3 id="参考になるページ">参考になるページ</h3>

<p><a href="https://github.com/notro/fbtft/wiki">notroさんのfbtftに関するWiki</a>。本当に感謝。Great。<br>
ただ、ここに書いてある手順を踏んだだけではうまく動かなかった。<br>
以下、顛末と動かすまでの手順。</p>

<h4 id="rpi-updateが使える状態にする">rpi-updateが使える状態にする</h4>

<p>以下、Raspberry Pi上でのコマンド入力。<br>
以下のコマンドでrpi-updateを取得＆実行可能権限付与。</p>

<p><code>$ wget https://raw.github.com/Hexxeh/rpi-update/master/rpi-update</code><br>
<code>$ chmod +x ./rpi-update</code></p>

<p>rpi-updateは適当な場所に移しておく。パスが通っているところに置いておくと便利。<br>
以下、rpi-updateがある場所にパスが通っている前提で記載。</p>

<h3 id="rpi-updateを使ってkernelをアップデート">rpi-updateを使ってKernelをアップデート</h3>

<p>FBTFTドライバがビルトインされているとされるバージョンにしてみる。</p>

<p><code>$ sudo -E REPO_URI=https://github.com/notro/rpi-firmware BRANCH=builtin rpi-update</code></p>

<p>なんやかや起こったあと、リブート。</p>

<p><code>$ sudo reboot</code></p>

<p>これでFBTFTドライバが準備オッケーになっているはず、なのだが…？</p>

<h3 id="fbtft_deviceがない"><del>fbtft_deviceがない</del></h3>

<p><del>fbtft_deviceを有効にするために、modprobeしてみる。</del></p>

<p><code>$ sudo modprobe fbtft_device name=adafruit22</code></p>

<p><del>すると帰ってきた答えは、</del></p>

<p><code>FATAL: Module fbtft_device not found.</code></p>

<p><del>とのこと。実際に探してみたところ、fbtft_device.koというモジュールは存在していない様子。</del></p>

<hr>

<p><strong>2014/07/23/Wed 訂正</strong></p>

<p>結論から言うと上記の挙動であっていた。<br>
<code>BRANCH=builtin</code>を選択した場合はfbtft_deviceがloadableなモジュールとして現れない、<br>
つまり modprobe で見つからないと言われるのは正しかった。</p>

<p>上記の状態で、あとは /boot/cmdline.txt に然るべき内容を追記するだけでOK。<br>
その後PiTFTを接続し、Raspberry Piを再起動すれば画面に何か映るはず。</p>

<p>よって以下の手順はすべて無駄であるが、<br>
以下の手順が誤りであることを示すために残しておく。。</p>

<p>以下、無駄な手順メモ。全く不要。</p>

<hr>

<h3 id="いろいろやってfbtft_deviceを用意する"><del>いろいろやってfbtft_deviceを用意する</del></h3>

<p><del>fbtft_deviceを求めて色々さまよったところ、上述のKernelアップデートの際に、</del></p>

<p><code>sudo REPO_URI=https://github.com/notro/rpi-firmware rpi-update</code></p>

<p><del>とビルトインではなく、loadable moduleとしてfbtft_deviceが現れるやつをチョイスしてみたところ、</del><br>
<code>sudo modprobe fbtft_device name=adafruit22</code>がnot foundではなく、別のエラーになった。<br>
<del>探してみたところ、実際にモジュールは存在した。ただし正常にmodprobeできていない。</del></p>

<p><del>FBTFTのモジュールは、</del><br>
<code>/lib/modules/$(uname -r)/kernel/video/fbtft</code><br>
<del>に置かれている。これをどこか別の場所にコピーしておく。後々使う。</del></p>

<h3 id="rpi-updateを使ってfbtftビルトインバージョンに戻す"><del>rpi-updateを使ってFBTFTビルトインバージョンに戻す</del></h3>

<p><del>上で一回やってるやつをやって、FBTFTビルトインバージョンのKernelに戻す。</del></p>

<p><code>$ sudo -E REPO_URI=https://github.com/notro/rpi-firmware BRANCH=builtin rpi-update</code><br>
<code>$ sudo reboot</code></p>

<h3 id="戻したのち、コピーしておいたfbtftを所定の位置に戻す"><del>戻したのち、コピーしておいたfbtftを所定の位置に戻す</del></h3>

<p><code>/lib/modules/$(uname -r)/kernel/video/fbtft</code>~~の位置に戻す。~~</p>

<h3 id="depmodする。"><del>depmodする。</del></h3>

<p><code>sudo depmod -a</code></p>

<h3 id="fbtft_deviceをmodprobeする"><del>fbtft_deviceをmodprobeする</del></h3>

<p><del>not foundとは言われなくなり、ちゃんとロードされる。はず。</del></p>

<h3 id="あとはnotroさんのところの手順に従う">あとはnotroさんのところの手順に従う</h3>

<p>/boot/cmdline.txtであるとか、もろもろ変更する。<br>
PiTFTはきっと動き出す。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RaspberryPiで動画を配信しながら写真も撮る]]></title>
    <link href="http://pankona.github.io/blog/2014/06/10/raspi-photo-during-streaming/"/>
    <updated>2014-06-10T21:49:47+09:00</updated>
    <id>http://pankona.github.io/blog/2014/06/10/raspi-photo-during-streaming</id>
    <content type="html"><![CDATA[<p>Raspberry Pi＋カメラモジュールを使って、<br>
- 映像をWebページで配信しつつ。<br>
- いま写してる絵を保存する（写真を撮るみたいな）。写真を撮るボタンもWebページに備える。<br>
- 撮った写真はRaspberry Piにとりあえず保存しておいて、Webページ越しに確認できる。<br>
というのをやってみた。<br>
例によっていくつか躓いた点があるので、備忘録的に記しておく。</p>

<h3 id="raspistillでの静止画撮影とmjpg-streamerでの動画配信は同時に行えない？">raspistillでの静止画撮影とmjpg-streamerでの動画配信は同時に行えない？</h3>

<p>どうやらそのようである。最初は、<br>
「Webページ上にボタンを用意し、押されたら <code>raspistill</code> コマンドを発行する。」というやり方でやろうと思ったので当てが外れた感じ。<br>
mjpg-streamerで動画を配信する状態になっている状態でraspistillコマンドを実行すると、エラーが吐かれてしまってうまくいかない。<br>
mjpg-streamerにカメラデバイスを専有されてしまっているとか、そういう雰囲気でうまくいかないんだろうと予想。</p>

<h3 id="mjpg-streamerのsnapshot機能を使う">mjpg-streamerのsnapshot機能を使う</h3>

<p>ではどうするかと言うと、mjpg-streamerには静止画を撮影する機能があるので、これを使ってみた。<br>
<a href="https://code.google.com/p/mjpg-streamer/">mjpg-streamerのプロジェクトのページ</a>に少しサンプルがあって、例えば、mjpg-streamerを動作させている状態でもって、<br>
<code>http://[Raspberry PiのIPアドレス]:8080/?action=stream</code> というURLにアクセスすれば動画配信になり、<br>
<code>http://[Raspberry PiのIPアドレス]:8080/?action=snapshot</code> というURLにアクセスすれば、静止画の撮影になる。<br>
これらは、同時に行うことができる。つまり、これをうまく使えば動画を配信しながら静止画の撮影ができるのでは、と。</p>

<h3 id="wgetで画像を保存する">wgetで画像を保存する</h3>

<p>Webページ上にボタンを用意しておくところまでは同じで、ボタンが押されたら <code>raspistill</code> の代わりに、<code>wget</code> を発行する。<br>
例） <code>wget -O /tmp/picture.jpg http://[Raspberry PiのIPアドレス]:8080/?action=snapshot</code><br>
上記の例では、/tmp/picture.jpgという名前でmjpg-streamerが出力している動画のスナップショットが保存される。<br>
なので一応、動画配信しながら写真を撮る、という目的は達成できた。</p>

<p>できた、が、、、<br>
動画配信中の画像をそのまま静止画にするだけなので、例えば静止画の画質を動画のものより良くする、とか、画像サイズを変更する、アス比を変更する、とかできない。<br>
あくまで動画を一枚切り取っただけ、という感じ。まあ及第点か。。</p>

<h3 id="撮った画像を確認するためにrailsアプリを作った">撮った画像を確認するためにRailsアプリを作った</h3>

<p>Raspberry PiでRailsなんてどうなのか。でもちょっと作ってみた。<br>
目下作り途中だが。とりあえず動いてるのを見るのは楽しい。<br>
<a href="https://github.com/pankona/raspi_camera_server">https://github.com/pankona/raspi_camera_server</a></p>

<ul>
<li>あらかじめmjpg-streamerを起動した状態で、上記Railsアプリを動かす</li>
<li>Railsアプリに何かからアクセスすると、動画が配信されている状態を確認できる</li>
<li>動画をクリックすると、スナップショットが保存される。</li>
<li>保存されたスナップショットは、動画下部に小さく表示される。</li>
</ul>

<p>みたいなもの。テスト書いたりして改善していこう。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry PiでRailsを動かしてみたときのこと]]></title>
    <link href="http://pankona.github.io/blog/2014/05/29/rails-on-raspi/"/>
    <updated>2014-05-29T21:02:35+09:00</updated>
    <id>http://pankona.github.io/blog/2014/05/29/rails-on-raspi</id>
    <content type="html"><![CDATA[<p>Raspberry PiにRailsを入れたときのこと。<br>
あまりすんなりとはいかなかったので、つまづいたところなんかをメモ。<br>
（ちなみにRaspberry Piで動いているOSはArch Linuxです。）</p>

<h2 id="第一の関門-railsのインストール">第一の関門 Railsのインストール</h2>

<p>Raspberry Piにsshで接続し、<code>gem install rails</code> とやるだけでRailsのインストールが始まる。<br>
簡単、、、なのだがこれがなかなか終わらない。しかしこれはただ単純に待てばいいので難しいことは何もない。<br>
終わるまで3時間程度。</p>

<p>sshで接続してる場合、ほっとくとタイムアウトしてしまうと思われる。<br>
その場合は、screen というので対策できる。nohup というのもある。<br>
とにかく長時間放置でタイムアウトしちゃってもいい（ログアウトしちゃってもいい）対策は必要。</p>

<h2 id="第二の関門-bundle-install">第二の関門 bundle install</h2>

<p>Railsアプリを動かす前準備で <code>bundle install</code> 。やると思います。<br>
これがまた死ぬほど時間かかる上に、インストール中に、</p>

<p>killed</p>

<p>とだけ出て終了しちゃう。当然だが bundle install は終わってない。<br>
こっちのが問題だった。</p>

<h3 id="killed-されちゃうのはメモリ不足のため">killed されちゃうのはメモリ不足のため</h3>

<p>bundle install で Killed になっちゃうのは、メモリ不足のための模様。<br>
これは、スワップ領域を設定してあげることで回避できた。<br>
スワップ領域設定の方法については、例によってArch LinuxのWikiを参照した。<br>
何でも載ってるね！ちなみ参照したページは<a href="https://wiki.archlinux.org/index.php/Swap_(%E6%97%A5%E6%9C%AC%E8%AA%9E)">これ - Swap （日本語） - ArchWiki</a>。</p>

<h3 id="killed-されなくなったけど、、、超時間かかる">killed されなくなったけど、、、超時間かかる</h3>

<p>killed されなくなったのはいいけど、Railsのインストールのときと同じく、やたら時間がかかる。。。<br>
9000秒くらいかかったので、実に3時間弱くらい。</p>

<p>なんで時間かかるかというと、まず、 <strong>therubyracer</strong> をインストールしようとしてるのが原因。<br>
これ自体はいれたかったのでいいんだけど、どうやらこいつを入れるのに伴って、 <strong>libv8</strong> というのが入る模様。<br>
そんでこれがどうやら <strong>ソースとってきてビルドしている</strong> ようなのである。Raspberry Piになんてことさせるんや。。。<br>
最近の割とパワーのあるPCなら10分程度で終わるらしいのだが。</p>

<h2 id="まとめると">まとめると</h2>

<p>RailsをRaspberry Piにインストールするためには、</p>

<ul>
<li>スワップ領域を拡大する（bundle install 中に killed されちゃうならば）</li>
<li>あとはひたすら待つ。トータルで6時間くらい待つ。</li>
</ul>

<p>ちなみにRailsの起動がまたすっとろい。webrickじゃなくてthinにするとちょっとだけ早くなる気がする、とか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日本語入力のための設定メモ for Arch Linux]]></title>
    <link href="http://pankona.github.io/blog/2014/05/28/use-uim-mozc/"/>
    <updated>2014-05-28T07:49:23+09:00</updated>
    <id>http://pankona.github.io/blog/2014/05/28/use-uim-mozc</id>
    <content type="html"><![CDATA[<p>IMはずっとibusを使ってきたのだが、なかなか設定に融通が効かないというか、なんというか。<br>
具体的な要望としては、</p>

<ul>
<li>mozcを使いたい</li>
<li>Alt + Space でIMEを切り替えたい（Direct Inputと日本語入力をトグルする）</li>
</ul>

<p>という二点なのだが、後者の「Alt + Space」というキーバインドを設定する方法がわからず。。。<br>
きっとやり方があるというか、いままでごまかしごまかしやってきたのだが、<br>
ついに気持ち悪さが先に立って、「やめてやるわ！」となったところ。</p>

<p>で、IMとしてUIMを使ってみた。uim-mozc。<br>
そしたらいともたやすく Alt + Space でのトグルが設定できちゃったもんだから拍子抜けというか。<br>
はじめからこれ使ってれば良かったね！しばらくこれでいきます。uim-mozc。</p>

<p>備忘録的に、設定方法のメモ。<br>
Arch Linux向けです。</p>

<h2 id="基本的にはwiki参照">基本的にはWiki参照</h2>

<p>ブログに書いた内容というのはいずれ時代遅れになるので、、、<br>
やはり、Arch Wikiの<a href="https://wiki.archlinux.org/index.php/Input_Japanese_using_uim_(%E6%97%A5%E6%9C%AC%E8%AA%9E)">uim-mozcの設定方法</a>を参照するのが確実。<br>
うちもこれでいけた。</p>

<h2 id="インストールしたパッケージ">インストールしたパッケージ</h2>

<ul>
<li>uim</li>
<li>uim-mozc</li>
</ul>

<h2 id="設定箇所">設定箇所</h2>

<ul>
<li>.xinitrc の記載</li>
</ul>

<p>.xinitrcに以下を追記。uimを使う設定ですな。</p>

<figure class='code'><figcaption><span>.xinitrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># uim</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GTK_IM_MODULE</span><span class="o">=</span><span class="s1">&#39;uim&#39;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">QT_IM_MODULE</span><span class="o">=</span><span class="s1">&#39;uim&#39;</span>
</span><span class='line'>uim-xim &amp;
</span><span class='line'><span class="nb">export </span><span class="nv">XMODIFIERS</span><span class="o">=</span><span class="s1">&#39;@im=uim&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="uimの設定">uimの設定</h2>

<p><code>uim-pref-gtk</code>で設定画面を出し、色々設定する。</p>

<ul>
<li>「Global settings」の設定。</li>
</ul>

<p>&#8211; Specify Default IMにチェックを入れる。<br>
  &#8211; Default input method を Mozc にする。</p>

<ul>
<li>「Mozc」の設定。</li>
</ul>

<p>&#8211; Default Input modeはDirect Inputに。<br>
  &#8211; ついでにVIM協調モードも有効にしておく。</p>

<ul>
<li>「Mozc key bindings」の設定。</li>
</ul>

<p>&#8211; [Mozc] on/off、両方に&quot;&lt;Alt&gt;space&quot;を設定。</p>

<h3 id="ここまでで">ここまでで</h3>

<p>Alt + Space でDirect Inputと日本語入力がトグルできるようになった。<br>
チャンスがあれば、他のIMも試してみよっかな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Japanの検索にgithubがヒットしないかと思ったがそんなことはなかった]]></title>
    <link href="http://pankona.github.io/blog/2014/05/19/about-google-search/"/>
    <updated>2014-05-19T21:21:34+09:00</updated>
    <id>http://pankona.github.io/blog/2014/05/19/about-google-search</id>
    <content type="html"><![CDATA[<h2 id="自分のページがgoogle検索にヒットしない理由">自分のページがGoogle検索にヒットしない理由</h2>

<p>なかなか自分のページ（ここのブログのこと）がGoogle検索に引っかからないので、<br>
いや、大層なことを書いているわけでもないから引っかからなくても怒ったりはしないが、<br>
いやでもなんで引っかからないんだろう、と思って調査をしていたところ、</p>

<h3 id="githubのリポジトリはgoogle日本の検索に引っかからない">GithubのリポジトリはGoogle日本の検索に引っかからない</h3>

<p>といった記事を見つけた。ほんまかいな？<br>
もしかしてそのせいでうちのページはGoogleに引っかからないんじゃああるまいか？<br>
（Github pagesを使って公開しているページなので）</p>

<p>等と考えつつ、調査を続行していったところ、、、</p>

<h3 id="結論からすると、githubのリポジトリはgoogle日本の検索にちゃんと引っかかる。">結論からすると、GithubのリポジトリはGoogle日本の検索にちゃんと引っかかる。</h3>

<p>ただし条件がある模様。それは（おそらく）、</p>

<p><strong>ページ（リポジトリの場合はREADMEかな？）に日本語が含まれていること</strong></p>

<p>つまり、Google日本の検索に引っかからない、というよりは、<br>
<strong>&quot;日本語のページを検索&quot;</strong>に引っかからない、ということである模様。<br>
全編英語で書いてたら英語のページと判断して、&quot;日本語のページを検索&quot;には載せない、ってことかなー。<br>
そして、Google日本の検索は、おそらくデフォルトは&quot;日本語のページを検索&quot;になってる。という話。</p>

<p>加えて、GithubのリポジトリのREADMEなんかは、英語だけで書かれているケースが多い。<br>
だからGoogle日本を使ってそのまま検索をしていると、Githubのページがあんまり出てこないという現象が。</p>

<p>だので、英語だけで書かれたGithubのページも、検索オプションで言語に依らない検索にしてあげれば、Google日本の検索でも出てきます。</p>

<h3 id="じゃあ日本の人にもリポジトリにリーチしてもらうにはどうするか？">じゃあ日本の人にもリポジトリにリーチしてもらうにはどうするか？</h3>

<p>自分のGithubのリポジトリに日本人を呼び込みたい！と思ったら、READMEに日本語をちょっと混ぜてあげればリーチできる人が増えるかも？<br>
と思っているがどうか。たぶん、おそらく、きっと、効果あると思われる。つまり自信ない。<br>
自分のリポジトリ使って実験してみます。そのうち調査結果を書きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vaio Pro 13における手のひら検知 on Arch Linux]]></title>
    <link href="http://pankona.github.io/blog/2014/05/15/vaio-pro-palm-detect-on-archlinux/"/>
    <updated>2014-05-15T12:25:25+09:00</updated>
    <id>http://pankona.github.io/blog/2014/05/15/vaio-pro-palm-detect-on-archlinux</id>
    <content type="html"><![CDATA[<p>Vaio Pro 13にArch Linuxを入れて遊んでいる近頃である。<br>
概ね快適なLinuxライフを過ごせているのだが、一個だけ非常に不満な点がある。<br>
それは「タッチパッドの手のひら検知」。パームディテクト、Palm Detection、等と呼ばれる機能。</p>

<h3 id="手のひら検知？">手のひら検知？</h3>

<p>もはや手のひら検知について触れる必要もなさそうだが、一応。</p>

<p>Vaio Pro 13のタッチパッドはなかなか大きい。<br>
これは最近のノートPC、MBPとか他のUltraBookにも採用されていて流行と言ったら流行。<br>
これ自体は割と私は好みで、二本指、三本指でのスワイプなんかもやりやすくてなかなかいい。</p>

<p>ただ大きいタッチパッドには弊害もあって、キーボードを打ってるときに親指の付け根のあたりで触れちゃうってこと。<br>
触れちゃうとどうなるかっていうと、クリックした扱いになってしまって、つまりカーソルが飛ぶ。<br>
編集中に予期せぬ場所にカーソルが飛んでしまって、あれ、これどうなった、みたいなことになる。</p>

<p>それを解決してくれるのが、手のひら検知の仕組み。<br>
つまり意図したタッチでないと思われるものは無視してくれるというやつで、考えた人凄いと思います。</p>

<h3 id="arch-linux-on-vaio-pro-13の場合">Arch Linux on Vaio Pro 13の場合</h3>

<p>件の手のひら検知を有効にする仕組みがある（デフォルトではオフ）。<br>
synclient、PalmDetect、あたりでぐぐると結構出てくる。具体的には、<br>
<code>synclient PalamDetect=1</code> とかってやって手のひら検知を有効にする。する、のだが。</p>

<p>なんか全然効いてない気がするんですけど・・・。ということで調べてみた。<br>
ほんとに効いてるのかどうかを。</p>

<h3 id="結論からいうと効いてなかった">結論からいうと効いてなかった</h3>

<p>効いてなかったです。ちくしょうめ。やっぱりか。</p>

<p>ドライバのソースコードに簡単にログを仕込んで確認してみたところ、やっぱり効いてなかった。<br>
Arch Linuxでタッチパッドのドライバーは、Synapticsが使われている（というか大体どこでもSynapticsか）。<br>
ソースコードはこれ。Githubに公開されている。<a href="git:anongit.freedesktop.org/xorg/driverxf86-input-synaptics">xf86-input-synaptics</a></p>

<p>なんで効かないかと言うと、の前に、ソースコードからどうやって手のひら検知をしているかを調べてみたのでそれをメモ。</p>

<h3 id="どうやって手のひら検知している？">どうやって手のひら検知している？</h3>

<p>以下の3要素を考慮して手のひら検知としている模様。</p>

<ul>
<li>PalmDetectの設定が有効になっているか（synclient PalmDetect=1 で有効になるやつ）</li>
<li>PalmMinZがしきい値を超えているか（これも synclient PalmMinZ=XXX で設定できる）</li>
<li>PalmMinWidthがしきい値を超えているか（これも synclient PalmMinWidth=XXX で設定できる）</li>
</ul>

<p>PalmMinZ は、どれくらい深く（強く？）タッチパッドが押されたら手のひらと判断するか、のしきい値。<br>
PalmMinWidth は、タッチの広さを見ていて、太すぎる指は手のひらとみなしましょう、という判断のためのしきい値。</p>

<h3 id="arch-linux-on-vaio-pro-13-が手のひら検知をしてくれない理由">Arch Linux on Vaio Pro 13 が手のひら検知をしてくれない理由</h3>

<p>上記のしきい値のうち、どうやらPalmMinWidthのほうがおかしいっぽくて、<br>
どんな触り方をしても常に「0」で判定されてしまっている模様。<br>
ちなみに、SynapticsはPalmMinWidthが0のときは手のひらとして判断しないように実装されている。<br>
なので、PalmDetect、PalmMinZ、PalmMinWidth、どれをどの値にしても手のひら検知は効かないということである。ちくしょうめ。</p>

<h3 id="どうすれば解決するのか？">どうすれば解決するのか？</h3>

<h4 id="palmminwidthを正しく判定させる方法">PalmMinWidthを正しく判定させる方法</h4>

<p>調査をしているが今のところわからない。。一般ピープルに手が及ぶ範囲なのかどうか。</p>

<h4 id="それ以外の対処法？">それ以外の対処法？</h4>

<p>PalmMinWidthはもう一切判断に含めないようにソースコードを書き換えてみたが、、、<br>
それってつまりタッチ深度だけで手のひらを検知するということであって、それはまあ微妙な感じ。</p>

<h4 id="つまり">つまり</h4>

<p><strong>残念ながら、手のひら検知がいまいちな件は解決できていない。</strong>なんとかする方法の調査はTo Be Continuedである。<br>
デュアルブートしているWindowsの側ではできているっぽいので、Arch Linux側でも出来ないことないと信じて。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arch LinuxとWindows8.1をデュアルブートにしたときの備忘録]]></title>
    <link href="http://pankona.github.io/blog/2014/05/14/arch-windows-multiboot-tips/"/>
    <updated>2014-05-14T17:59:10+09:00</updated>
    <id>http://pankona.github.io/blog/2014/05/14/arch-windows-multiboot-tips</id>
    <content type="html"><![CDATA[<h2 id="このポストは">このポストは</h2>

<p>Windows8.1に対してWindows Updateしたところ、何だかわからないがデュアルブートしなくなって焦ったため、<br>
直し方というか、そもそもどうやってデュアルブートにしているかをメモしておくための記事。</p>

<h3 id="件のpcについて">件のPCについて</h3>

<p>以下のようなPCと、その中身の構成にしている。</p>

<p>&#8211; PC本体：Vaio Pro 13<br>
&#8211; OS：Arch LinuxとWindows8.1のデュアルブート</p>

<h3 id="デュアルブートのためにしたこと---まずは普通にarch-linuxをインストール">デュアルブートのためにしたこと - まずは普通にArch Linuxをインストール</h3>

<ul>
<li>Arch Linux起動のためのUSBメモリを作成。ここはWindowsを使う。</li>
</ul>

<p><a href="https://wiki.archlinux.org/index.php/USB_Installation_Media_(%E6%97%A5%E6%9C%AC%E8%AA%9E)">USB Installation Media（日本語） - Arch LinuxのWiki</a> なんかが参考になる。</p>

<ul>
<li>Windowsを使ってLinux向けのパーティションを切る。</li>
</ul>

<p>「管理」を使ってやる。<a href="http://windows.microsoft.com/ja-jp/windows/create-boot-partition#1TC=windows-7">ブート パーティンションを作成する - Microsoftのページ</a>等が参考になる。<br>
とにかく何か領域が空いていればいい。うちの構成では180GB程度確保した。<br>
少なくとも30GBくらいいるかな？</p>

<ul>
<li>Arch Linux起動用のUSBを挿した状態でPCを起動し、USBからのブートを行う。</li>
</ul>

<p>あとは↑で作ったパーティションにArch Linuxをインストールしていく。詳しくはやはりArch LinuxのWiki参照。<br>
&#8211; パーティションのフォーマット。割り当て可能領域はすべて割り当て。EFIパーティションにする必要はない。普通ので。<br>
&#8211; /mnt にフォーマットしたパーティションをマウント。<code>mount /dev/sda5 /mnt</code> ← うちの環境の場合。<br>
&#8211; chrootする。<code>arch-chroot /mnt</code> で。 <br>
&#8211; Arch Linuxのインストール。 <code>pacman -S base base-devel</code> とかやる。<br>
&#8211; genfstab とかそういったことをこまごま行う。<br>
&#8211; ブートローダのインストール。ブートローダにはgummibootを採用した。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mount /dev/sda2 /boot/EFI
</span><span class='line'>cd /boot/EFI
</span><span class='line'>gummiboot install</span></code></pre></td></tr></table></div></figure>

<p>ここまでで勝手にデュアルブートしてくれたら嬉しかったが、そうはいかなかった（本来はこれだけでOKらしい）。<br>
Vaioのせいなのか、Windowsのせいなのか。。</p>

<h3 id="デュアルブートのためにしたこと---無理やりgummibootを使わせる">デュアルブートのためにしたこと - 無理やりgummibootを使わせる</h3>

<p>上記までで何が起きるかというと、、、<br>
どうやら、せっかくgummibootで設定したブートの設定がPC起動時になかったことにされてしまう模様。<br>
つまりWindowsが問答無用で起動される状態に戻ってしまう。VaioのせいなのかWindowsのせいなのか。。。</p>

<p>この点をちゃんと解決するのは諦めました。<br>
諦めて、Windowsの起動に使われるファイルをgummibootのものと置き換えることでデュアルブートを実現。。<br>
一応、やれればいいや、ということで。</p>

<ul>
<li>先ほどのUSBからArch Linuxを起動し、無理やりgummibootを使わせるようにしにいく</li>
</ul>

<p>&#8211; まず、EFIのパーティションをマウントする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mount /dev/sda2 /mnt/boot/EFI</span></code></pre></td></tr></table></div></figure>

<p>&#8211; Windows起動用のファイルとgummiboot起動用のファイルを置き換える。</p>

<p>&#8212; Windows起動用のファイル &#8230; /boot/EFI/Microsoft/boot/bootmgrfw.efi<br>
&#8212; gummiboot起動用のファイル &#8230; /boot/EFI/gummiboot/gummibootx64.efi</p>

<p>上記のWindows起動用のファイルを、gummiboot起動用のファイルで上書きしてやると、、、<br>
次回のPC起動時には、OS選択の画面が表示されるはず。上書きする前にバックアップしてあげてね。。。</p>

<h3 id="windowsアップデートのときに、bootmgrfw.efiが更新されちゃうことがあるっぽい">Windowsアップデートのときに、bootmgrfw.efiが更新されちゃうことがあるっぽい</h3>

<p>だのでWindowsアップデートでデュアルブートができなくなったりするんだろう。<br>
デュアルブートできなくなったら、いちいちgummibootx64.efiをWindows起動用のファイルに上書きしてやる必要がある。</p>

<h2 id="これでwindowsアップデートも怖くない！">これでWindowsアップデートも怖くない！</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi + カメラモジュール + Webで配信]]></title>
    <link href="http://pankona.github.io/blog/2014/05/05/raspi-livestream-web/"/>
    <updated>2014-05-05T23:38:52+09:00</updated>
    <id>http://pankona.github.io/blog/2014/05/05/raspi-livestream-web</id>
    <content type="html"><![CDATA[<p>Raspberry Piにカメラモジュールを接続し、映像をWebで配信させてみた。<br>
いろいろ悩んだ点もあったので、やり方の結論をメモしておく。<br>
ちなみに、Raspberry PiにはArch Linux (ARM版) を載せている。</p>

<h2 id="良さそうな例">良さそうな例</h2>

<p>参考にしたウェブサイトは↓。結論からするとここだけでOKだった。<br>
<a href="https://github.com/jacksonliam/mjpg-streamer">https://github.com/jacksonliam/mjpg-streamer</a></p>

<h2 id="上記のリポジトリの情報を元にやったこと">上記のリポジトリの情報を元にやったこと</h2>

<h3 id="mjpg-streamerのインストール。">mjpg-streamerのインストール。</h3>

<p>上記のリポジトリからソースコードをもってきてビルド。ビルド方法も上記のリポジトリのREADMEに記載されている。<br>
pacmanであったりyaourtで取得できるmjpg-streamerのパッケージは使わない。それらはinput_raspicam.soを作ってくれないため。</p>

<h3 id="超簡単にhtmlを書く。">超簡単にhtmlを書く。</h3>

<p>下記のような。とりあえずサンプルなので、簡単に。。<br>
書いたHTMLは、任意の場所におく。ここではひとまず、<code>~/www/index.html</code>として置いたとする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Raspberry Pi<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;/?action=stream&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="配信するコマンドを実行する。">配信するコマンドを実行する。</h3>

<p>このコマンドも件のリポジトリに記載されているが、一応。<br>
ライブラリ（.so）へのパスが通ってなかったら、LD_LIBRARY_PATHを設定してライブラリへのパスを通すか、もしくはライブラリをフルパスで指定する。</p>

<p><code>mjpg_streamer -o &quot;output_http.so -w ./www&quot; -i &quot;input_raspicam.so -x 1280 -y 720 -fps 15 -ex night&quot;</code></p>

<p>こんな感じに入力してやると、カメラが動き出して動画配信が始まる。<br>
別のPC等からブラウザで、</p>

<p><code>http://[Raspberry PiのIPアドレス]:8080/</code></p>

<p>にアクセスしてあげると、カメラが写してる画像が配信されているのが確認できると思われる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pygmentsがエラーを吐きやがるので修正]]></title>
    <link href="http://pankona.github.io/blog/2014/04/28/fix-pygments/"/>
    <updated>2014-04-28T21:15:16+09:00</updated>
    <id>http://pankona.github.io/blog/2014/04/28/fix-pygments</id>
    <content type="html"><![CDATA[<p>Octopressのカスタマイズを続けていく。</p>

<h2 id="fenced-code-block-がうまく表示されない">Fenced Code Block がうまく表示されない</h2>

<p>具体的にどのようにうまく表示されないかというと、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% hogehoge %}</span></code></pre></td></tr></table></div></figure>

<p>といった表記。％で囲まれてる部分も Fenced Code Block を使って表示してもらいたいところであったが、<br><br>
コメントとしてみなされてしまっているようで、表示してもらえないという感じに。</p>

<p>結果として、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{\% codeblock %}
</span><span class='line'>{\% raw %}
</span><span class='line'>{% hogehoge %}
</span><span class='line'>{\% endraw %}
</span><span class='line'>{\% endcodeblock %}</span></code></pre></td></tr></table></div></figure>

<p>というので書くことができた。raw ~ endraw というのを使う。<br><br>
ただ、↑に書いている通り、ネストさせることができなかったのでバックスラッシュ突っ込んでお茶を濁した。。<br><br>
ネストさせるのはどうやればいいのかな？</p>

<h2 id="fenced-code-block-にファイル名が表示できない">Fenced Code Block にファイル名が表示できない</h2>

<p>Fenced Code Block を書くときに、↓のような書き方をするとコードブロックにちょっとした注釈が出る。</p>

<p><code>{% codeblock about.html %}</code><br></p>

<p>出るという触れ込みだったのだが、なかなかどうして出なかった。</p>

<p>結論からすると、これはうちのArchlinuxがpython3を使おうとしているためだった。<br><br>
PygmentsというやつがPython2.7を求めているところを、違うバージョンのPythonが使われちゃって失敗してた感じ。</p>

<p>修正方法は以下のページを参考にしました。というかそのまま使わせていただきました。多謝。<br>
<a href="http://www.nonsenseby.me/blog/2013/04/13/arch-linux/">Arch Linux, Octopress, and misbehaving Pygments - Nonsense By Me</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OctopressにGravatarの画像が出るようにしてみた]]></title>
    <link href="http://pankona.github.io/blog/2014/04/26/octopress-custom/"/>
    <updated>2014-04-26T20:19:19+09:00</updated>
    <id>http://pankona.github.io/blog/2014/04/26/octopress-custom</id>
    <content type="html"><![CDATA[<p>引き続きOctopressをカスタマイズしていく。</p>

<h3 id="サイドバーにgravatarの画像を出すように">サイドバーにGravatarの画像を出すように</h3>

<p>京都で食べた抹茶パンケーキ（←旨い）の画像を載せるように。<br>
自分のブログ感が出て良い。</p>

<p>以下のGravatarプラグインを使わせてもらいました。多謝。</p>

<p><a href="https://github.com/joet3ch/gravatar-octopress">joet3ch/gravatar-octopress</a></p>

<p>↑を導入すると、Gravatarの画像をimgタグ的にひっぱってこれるようになるので、<br>
それを参考にしつつ、souce/_include/custom/asides/about.html を編集してった感じ。</p>

<p>about.html はこんな感じに。</p>

<figure class='code'><figcaption><span>about.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>About Me<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  {% if site.gravatar_email %}
</span><span class='line'>    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;{% gravatar_image %}&quot;</span> <span class="na">alt=</span><span class="s">&quot;Gravatar of {{site.author}}&quot;</span> <span class="na">title=</span><span class="s">&quot;Gravatar of {{ site.author }}&quot;</span> <span class="na">align=</span><span class="s">&quot;left&quot;</span> <span class="na">style=</span><span class="s">&quot;margin-right:10px;&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  {% endif %}
</span><span class='line'>  Arch Linux on Vaio Pro 13で日々遊んでます。Octopressはvimで編集。武蔵野線ユーザ。一応、ソフトウェアエンジニア。
</span><span class='line'>  <span class="nt">&lt;br</span> <span class="na">clear=</span><span class="s">&quot;left&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="commentをかけるようにdisqusを設定">CommentをかけるようにDisqusを設定</h3>

<p>各ポストにコメントがかけるような感じにしてみた。いかにもブラグらしい。<br><br>
設定方法をざっくり書いておくと、</p>

<p><span><br>
1. Disqusのアカウントを作り、ブログサイトに関する情報を登録するとshort nameが取得できる<br>
2. _config.ymlのdisqus_short_nameに、↑で取得したshort nameを設定する<br>
</span></p>

<p>次はテーマを変更してみようかな。デフォルトでもそこそこかっこいいが。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressにタグクラウドとカテゴリリストを追加してみた]]></title>
    <link href="http://pankona.github.io/blog/2014/04/25/add-category-list/"/>
    <updated>2014-04-25T21:11:53+09:00</updated>
    <id>http://pankona.github.io/blog/2014/04/25/add-category-list</id>
    <content type="html"><![CDATA[<p>Octopressにプラグインを追加して、tag_cloundとcategory_listを表示できるようにしてみた。<br>
見た目デフォルトのままというのも微妙なので、徐々にカスタマイズしていこう。</p>

<p>tag_cloud、category_listの追加については以下のページを参考にさせていただきました。多謝。<br>
<a href="http://rcmdnk.github.io/blog/2013/03/23/octopress/">http://rcmdnk.github.io/blog/2013/03/23/octopress/</a></p>

<p>次はサイドバーに筆者プロフィールをGravatarと共に載せる、みたいな感じにしてみようかな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressでブログを始めてみる]]></title>
    <link href="http://pankona.github.io/blog/2014/04/24/start-blog-with-octopress/"/>
    <updated>2014-04-24T21:44:52+09:00</updated>
    <id>http://pankona.github.io/blog/2014/04/24/start-blog-with-octopress</id>
    <content type="html"><![CDATA[<p>ちょっと長めの通勤時間を有効活用するため、軽く技術的な内容の備忘録というか、日記をつけてみることにした。<br>
マークダウンの書き方すらよくわかっていないが、徐々にいろいろと進歩させていこうと思う。</p>

<p>私は一応プログラマをやっている。なので色々困ったことにでくわし、そのたびに解決方法を調べつつ業務にあたっている。<br>
きっと私が困ったところは、おそらく世の中の誰かが同じように困っているであろうと信じ、本ブログがその助けになることを願うと共に、<br>
基本的には日々の調査結果なんかをここにアウトプットしていきたいと思っている。</p>

<p>細く、長く、続けて行ければ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Second Post]]></title>
    <link href="http://pankona.github.io/blog/2014/04/23/second-post/"/>
    <updated>2014-04-23T21:05:35+09:00</updated>
    <id>http://pankona.github.io/blog/2014/04/23/second-post</id>
    <content type="html"><![CDATA[]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://pankona.github.io/blog/2014/04/23/first-post/"/>
    <updated>2014-04-23T21:04:21+09:00</updated>
    <id>http://pankona.github.io/blog/2014/04/23/first-post</id>
    <content type="html"><![CDATA[]]></content>
  </entry>
  
</feed>
