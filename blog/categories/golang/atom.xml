<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Golang | make clean; make]]></title>
  <link href="http://pankona.github.io/blog/categories/golang/atom.xml" rel="self"/>
  <link href="http://pankona.github.io/"/>
  <updated>2017-03-12T15:36:17+00:00</updated>
  <id>http://pankona.github.io/</id>
  <author>
    <name><![CDATA[pankona]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[golang.tokyo#4@eureka]]></title>
    <link href="http://pankona.github.io/blog/2017/03/01/golangtokyo-4/"/>
    <updated>2017-03-01T10:31:27+00:00</updated>
    <id>http://pankona.github.io/blog/2017/03/01/golangtokyo-4</id>
    <content type="html"><![CDATA[<p>2017.03.01 に eureka さんにて、golang.tokyo #4 が行われました。</p>

<p><a href="https://golangtokyo.connpass.com/event/50714/">golang.tokyo #4 - connpass</a></p>

<p>今回もまた大盛況で一般参加枠は倍率3倍くらいの抽選となっていましたが、<br>
たまたまブログ枠が空いているところに遭遇してしまったため、またしてもブログ枠として<br>
参加させていただきました。内容をレポートしていきます。</p>

<p>発表内容の詳細は、実際発表に用いられたスライド (上記 connpass のページから辿れます) を参照いただくのが一番良いと思いますので、<br>
本記事ではその他、イベントの雰囲気や私の感想を主にお伝えしていくような体になります。<br>
それではいきます。今回のテーマは <strong>「concurrency」</strong> 。</p>

<hr>

<h1 id="concurrency-for-distributed-web-crawlers-by-puhitaku-さん">Concurrency for distributed Web crawlers by puhitaku さん</h1>

<p><a class="embedly-card" data-card-key="ee29ed4b275e459483a608ca67084559" data-card-controls="0" href="https://speakerdeck.com/puhitaku/concurrency-for-distributed-web-crawlers">Concurrency for distributed Web crawlers</a><br>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script></p>

<p>(↑のカードをクリックでスライドに飛びます。)</p>

<h2 id="appstore-と-google-play-をクロールして欲しい情報を収集するやつ">AppStore と Google Play をクロールして欲しい情報を収集するやつ</h2>

<ul>
<li><p>クロール対象はシングルドメイン。だが対象となるアプリが多い (100k以上) 。</p>

<ul>
<li>同一IPからあんまりひどいことするとバンされたりする...。</li>
<li>とはいえあんまりちんたらやってるわけにもいかない。24時間以内にクロールし終わる必要がある。</li>
</ul></li>
<li><p>Commander と Crawler</p>

<ul>
<li>AWS EC2 Container Service を使っている。</li>
<li>一日30弱くらいのインスタンスを立ち上げて並列でクローリングする。</li>
</ul></li>
<li><p>1 アプリあたりのクロール時間が見積もれないと困る。</p>

<ul>
<li>1 アプリあたりのクロール速度は割とまちまち。終わるの待ってたらクロール量が安定しない。</li>
<li>一個あたりのクロールを goroutine で行う。</li>
<li>規定時間を設ける。規定時間より超過した場合、終わってなくても次のタスクをスタートさせる。</li>
<li>という戦略で、時間あたりのクロール数を見積もれるという寸法。</li>
</ul></li>
<li><p>落とし穴シリーズ</p>

<ul>
<li>TCPコネクションを使い果たす問題。並列に行われるクロールの数が多すぎると TCP コネクションを使い果たしてしまう…。</li>
<li>この問題は、make(chan int, 100) みたくして、Channel が保持する値の数を制限することで対応。</li>
</ul></li>
</ul>

<hr>

<h1 id="goのスケジューラー実装とハマりポイント-by-niconegoto-さん">Goのスケジューラー実装とハマりポイント by niconegoto さん</h1>

<p><a class="embedly-card" data-card-key="ee29ed4b275e459483a608ca67084559" data-card-controls="0" data-card-type="article-full" href="https://talks.godoc.org/github.com/niconegoto/talks/concurrency.slide#1">Goのスケジューラー実装とハマりポイント</a><br>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script></p>

<p>Goroutine の内部実装について。</p>

<h2 id="goroutine-の実装デザイン">Goroutine の実装デザイン</h2>

<ul>
<li>runtime を読む。</li>
<li><p><a href="https://golang.org/pkg/runtime">https://golang.org/pkg/runtime</a></p></li>
<li><p>M、G、P という文字が頻繁に出てくる。それらの意味は、</p>

<ul>
<li>M ... Machine</li>
<li>G ... Goroutine</li>
<li>P ... Processor</li>
</ul></li>
</ul>

<h2 id="スケジューラーのハマりどころ">スケジューラーのハマりどころ</h2>

<ul>
<li>C 言語の pthread なんかと同じで、goroutine もコンテキストスイッチを考慮する必要がある。</li>
<li><a href="https://morsmachine.dk/go-scheduler">Morsing&#39;s Blog</a> に詳しいこと書いてある。</li>
</ul>

<h1 id="ridge-a-framework-like-gae/go-on-aws-by-fujiwara-さん">Ridge a framework like GAE/Go on AWS by fujiwara さん</h1>

<p><a class="embedly-card" data-card-key="ee29ed4b275e459483a608ca67084559" data-card-controls="0" href="https://speakerdeck.com/fujiwara3/go-on-aws">Ridge - A framework like GAE/Go on AWS</a><br>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script></p>

<p>Go で書いた HTTP Server を AWS Lambda で動かす…！</p>

<h2 id="ridge-の紹介">Ridge の紹介</h2>

<ul>
<li><a href="https://github.com/fujiwara/ridge">Ridge</a></li>
<li>実質、GAE/Go みたいなことを AWS Lambda で実現できる</li>
<li>裏で goroutine を延々動かしておくみたいなことはできない。Lambda はレスポンス返し終わると寝てしまう。

<ul>
<li>次のリクエストが来たら起きて続きの処理が行われていく</li>
</ul></li>
<li><p>頻繁にアクセスがなく、レイテンシ要求がシビアでないようなものに向く</p>

<ul>
<li>サービスが終了したゲームの告知 API とか。POST を受けて JSON を返す、という処理を EC2 使わないで行う。</li>
</ul></li>
<li><p>EC2 使わず、それでいてリクエスト数が多ければスケールする、ということで用途が合えば非常にリーズナブルにできる印象。</p></li>
</ul>

<hr>

<h1 id="ライブコーディング-by-kaneshin-さん">ライブコーディング by kaneshin さん</h1>

<p><img src="/images/golang.tokyo-4/1.jpg" alt="golang.tokyo-4"><br>
写真1. ライブコーディング直前の kaneshin さん</p>

<ul>
<li>tail コマンドを作る...!</li>
<li><a href="https://gist.github.com/kaneshin/a398720b8e20722a83bc6903e4017435">完成したものはこちら</a></li>
</ul>

<h2 id="ポイント-(と思ったところ)">ポイント (と思ったところ)</h2>

<ul>
<li>kaneshin さんは vim + vim-go プラグインを使って Go を書いている模様。</li>
<li>channel をバッファのように扱っている。</li>
<li>入力を待ち受ける goroutine と、出力を担当する goroutine とで 2 並列。
今回のテーマにあった良い題材であると感じた。</li>
</ul>

<hr>

<h1 id="嫁に怒られずに-go-を書く技術-by-teitei_tk">嫁に怒られずに Go を書く技術 by teitei_tk</h1>

<p><a class="embedly-card" data-card-key="ee29ed4b275e459483a608ca67084559" data-card-controls="0" href="https://speakerdeck.com/teitei/jia-ninu-rarezunigowoshu-kuji-shu">嫁に怒られずにGoを書く技術</a><br>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script></p>

<p>「嫁のため」という免罪符を得て開発していくスタイル</p>

<ul>
<li>LINE に天気予報だったりを投稿する。</li>
<li>つまり生活に役立つというか家内に益があれば良いということ。</li>
<li>夫婦円満を願ってやまない。</li>
</ul>

<hr>

<h1 id="gogland-by-sergey-ignatov-さん">Gogland by Sergey Ignatov さん</h1>

<p><img src="/images/golang.tokyo-4/2.jpg" alt="golang.tokyo-4"><br>
写真2. Gogland の開発者 Sergey Ignatov さん</p>

<p>JetBrains から Sergey Ignatov さんが来てくれて、Gogland の紹介をしてくれたぞ！</p>

<ul>
<li>function の定義に飛んで実装を確認する必要はなく、小窓で出せるような機能がある。便利そう。</li>
<li>引数のサジェストが賢い。ファジーサーチ的に動きつつ、型が合わないものはサジェストされない、等。</li>
<li>保存時に go fmt、 go import する機能も最近対応された。</li>
<li>2017年3月現在は EAP 版だが、年末くらいには EAP が取れて正式版になるような予定らしい。</li>
<li>意見・要望があったら <a href="https://youtrack.jetbrains.com/issues/GO">issue tracker</a> へ！</li>
</ul>

<hr>

<p>ざっくりですが、かいつまんで golang.tokyo 4 回目の様子を紹介いたしました。<br>
休憩時間にはビールも振る舞われたりして、無料でいいんですかという気持ちになります。<br>
いつもありがとうございます。</p>

<p>次回もまた 4 月くらいに実施されるようなので、都合が合えば参加させていただこうかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golang.tokyo#2@はてな]]></title>
    <link href="http://pankona.github.io/blog/2016/12/12/golangtokyo-2/"/>
    <updated>2016-12-12T10:24:17+00:00</updated>
    <id>http://pankona.github.io/blog/2016/12/12/golangtokyo-2</id>
    <content type="html"><![CDATA[<p>2016.12.12 に表参道のはてなさんにて、golang.tokyo #2 が行われました。</p>

<p><a href="https://golangtokyo.connpass.com/event/44807/">golang.tokyo #2 - connpass</a></p>

<p>今回もまたブログ枠にて参加させていただきましたので、<br>
その内容をレポートしていきます。</p>

<p>発表内容の詳細はスライド (上記 connpass のページから辿れます) を参照いただくのが一番良いと思います。<br>
本記事ではその他、イベントの雰囲気や私の感想を主にお伝えできればいいかなと思っています。<br>
それでは行きます。</p>

<hr>

<p>今回の golang.tokyo は 2 回目の開催。<br>
今後も色々目論まれているようです。楽しみ。</p>

<p><img src="/images/golang.tokyo-2/02.jpg" alt="golang.tokyo-2"><br>
図1. golang.tokyo について</p>

<p>golang.tokyo 2 回目のテーマは <strong>「テスト」</strong> について。</p>

<hr>

<h1 id="テストしやすいgoコードのデザイン-by-deeeet-さん">テストしやすいGoコードのデザイン by deeeet さん</h1>

<p><a class="embedly-card" data-card-key="ee29ed4b275e459483a608ca67084559" data-card-controls="0" data-card-type="article-full" href="https://talks.godoc.org/github.com/tcnksm/talks/2016/12/golang-tokyo/golang-tokyo.slide#1">テストしやすいGoコードのデザイン</a><br>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script><br>
(↑のカードをクリックでスライドに飛びます。)</p>

<p><img src="/images/golang.tokyo-2/07.jpg" alt="golang.tokyo-2"><br>
図2. 発表中の deeeet さん。</p>

<p>以下、印象に残ったところを抜粋。</p>

<h2 id="deeeet-さんはテストフレームワークを使わない派">deeeet さんはテストフレームワークを使わない派</h2>

<p>テストのフレームワークは使わず、testing パッケージだけで十分であろうとの意見。<br>
これは、フレームワークは「ミニDSL」であって、導入するひとはまだしも、<br>
あとからプロジェクトに入ってくる人は学習する部分が増えてしんどくなってしまう、という一面があるからとのこと。<br>
納得。</p>

<h2 id="テストしやすいコードとは">テストしやすいコードとは</h2>

<p><strong>「Table Driven Test」</strong> がおすすめ。<br>
* 入出力が理解しやすい<br>
* テストケース追加が容易<br>
* 「Table Driven Test に落とし込めるコード」は入出力が明確でテストしやすいコード</p>

<h2 id="テストしにくくなる要素とその対策">テストしにくくなる要素とその対策</h2>

<p>テストしにくくなるというのは「Table Driven Test」がやりにくくなる状況を指す。<br>
→ 入力以外の要素が出力影響を及ぼしてしまう状況。</p>

<ul>
<li>グローバル変数 (暗黙の入力)

<ul>
<li>なるべく関数の引数に入れるようにしてテストしやすくする</li>
<li>もしくは「デフォルトの値」として <strong>のみ</strong> 使う</li>
<li>変わらないかもしれない定数っぽい値もなるべく設定可能にする</li>
<li>環境変数もグローバル変数と同じ</li>
</ul></li>
<li>ユーザーの入力 (コマンドを入力→期待通りに動いたか、のテスト)

<ul>
<li>入力の受取に os.Stdin を暗黙的に使わず io.Reader を使い、テスト時に仮想的な入力を行えるようにする。</li>
<li>入力に対する出力で、Table Driven にすることができるようになる。</li>
</ul></li>
<li>ファイル出力 (ファイル出力された内容が正しいかどうか、のテスト)

<ul>
<li>実際に書いたあとに開き直して中身を確認するのでもテストは可能だが、大量にやろうと思うと遅くなってしまう。</li>
<li>入力のときと考え方は同じで、io.Writer を出力先とし、テスト時はオンメモリのバッファに出力できるようにする。</li>
<li>バッファに出力された内容とその期待結果で、Table Driven することができるようになる。</li>
</ul></li>
</ul>

<h1 id="macherelにおけるgoのエコシステムとかテストとか-by-songmu-さん">MacherelにおけるGoのエコシステムとかテストとか by Songmu さん</h1>

<p><a class="embedly-card" data-card-key="ee29ed4b275e459483a608ca67084559" data-card-controls="0" data-card-image="https://mackerel.io/files/images/brand-assets/screenshot-service.png" data-card-type="article-full" href="http://songmu.github.io/slides/golangtokyo-2/">MackerelにおけるGoのエコシステムとかテストとか</a><br>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script><br>
(↑のカードをクリックでスライドに飛びます。)</p>

<p><img src="/images/golang.tokyo-2/09.jpg" alt="golang.tokyo-2"><br>
図3. 発表中の songmu さん</p>

<h2 id="mackerel-のエコシステム周りの話">Mackerel のエコシステム周りの話</h2>

<ul>
<li>ソースをオープンにしてパッチ受け入れるようにした。

<ul>
<li>ホスト先は GitHub。contribute してもらいやすい。</li>
<li>pull request に対するレビュー体制、CI が必要。</li>
<li>Travis CI、Circle CI を使っている。CI の内容は以下のようなもの。

<ul>
<li>go vet、 golint go test</li>
<li>coverage 計測</li>
<li>cross build 可能か</li>
</ul></li>
</ul></li>
<li>ちなみに Changelog はプルリクエストの情報から自動生成している。</li>
</ul>

<h2 id="ミドルウェアのテスト">ミドルウェアのテスト</h2>

<ul>
<li>実際にテスト時に実行する

<ul>
<li>DB ならばモックせずに実際に DB を立ててデータを入れて確認をする、のような。</li>
<li>モックや interface でのテストでは気づけない部分もあるので、実際にやってテストする。</li>
</ul></li>
</ul>

<hr>

<h1 id="休憩">休憩</h1>

<p>deeeet さん、songmu さんの発表のあと、いったん休憩に。<br>
休憩ではピザとビールが振る舞われまして、はてなさんにスポンサーしていただいたとのこと。<br>
ありがたくいただきました。</p>

<p><img src="/images/golang.tokyo-2/11_rotated.jpg" alt="golang.tokyo-2"><br>
図4. ピザとビールをはてなさんから振る舞っていただく。</p>

<p><img src="/images/golang.tokyo-2/12.jpg" alt="golang.tokyo-2"><br>
図5. 会場遠景。芝生です。</p>

<p><img src="/images/golang.tokyo-2/13.jpg" alt="golang.tokyo-2"><br>
図6. deeeet さんにむらがる Gophers (私もこのあとむらがりました) 。</p>

<p>勉強会の真ん中にこういう親睦会的なノリの時間が設けられるのは珍しいかな？<br>
なんだか新鮮でした。参加者の方とも少しだけお話できたりしました。<br>
勉強会終わってからの親睦会だと参加できないケースが多い私のようなものにとっては、会の真ん中にこういうのやってもらうのもいいかもしれない。</p>

<hr>

<h1 id="ここから-lt-コーナー">ここから LT コーナー</h1>

<p>ピザとビールで温まってきたところで LT 開始。</p>

<h2 id="timakin-さん">timakin さん</h2>

<p><a class="embedly-card" data-card-key="ee29ed4b275e459483a608ca67084559" data-card-controls="0" href="https://speakerdeck.com/timakin/plain-db-import-with-go">Plain db import with Go</a><br>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script></p>

<ul>
<li><a href="https://github.com/timakin/gopli">timakin/gopli</a>

<ul>
<li>開発環境を本番環境に近づけるやつ。本番データをローカルに簡単にもってくる。</li>
</ul></li>
</ul>

<h2 id="osamingo-さん">osamingo さん</h2>

<p><a class="embedly-card" data-card-key="ee29ed4b275e459483a608ca67084559" data-card-controls="0" href="https://speakerdeck.com/osamingo/go-deshi-meru-json-rpc-ru-men">Go で始める JSON-RPC 入門</a><br>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script></p>

<ul>
<li>JSON-RPC！</li>
</ul>

<h2 id="kazuhiratogo-さん">KazuhiraTogo さん</h2>

<p><a class="embedly-card" data-card-key="ee29ed4b275e459483a608ca67084559" data-card-controls="0" href="https://speakerdeck.com/ktogo/continuous-deployment-with-go-on-aws-ecs">Continuous Deployment with Go on AWS ECS</a><br>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script></p>

<ul>
<li>デプロイをとことん自動化した話。</li>
<li>本番とローカルで同じ環境を → Docker を使う。</li>
<li>Circle CI 上の docker は Ubuntu。本番は Alpine。環境の違いが問題に。 → Docker on Docker にして解決した。</li>
</ul>

<hr>

<p>以上の内容でした。せめて雰囲気くらい伝わればいいですが。<br>
いずれの発表もとても内容が濃くて、勉強になりっぱなしでした。感謝。<br>
ひとまず Table Driven Test ですかね。取り入れてなかったのでやってみようか等と思い。</p>

<p>感謝といえば、運営サイドのこと。<br>
ほぼトラブルなしでスムーズに進んだのは、十分に準備してくれていたということだと思います。<br>
だいたいマイクの電池が切れたりスライドがうまく映らなかったり、そういうの対策しようがなくてしょうがないところもあるんですが、<br>
今回に関してはそういうのほぼほぼなくて、というかマイクの音量とか超ちょうど良くて、本当に細かい配慮を感じました。多謝。<br>
他にも、アンケートを集めて次回のネタにしたりしていて (今回のテーマも、前回のアンケートでテストに関することを聞きたいという要望が多かったから、という理由で選んだとのこと)、golang.tokyo 運営すげーなという印象です。すげーな！</p>

<p>次回もまた来年に予定されているようです。楽しみにしています！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golang.tokyo #1@mercari]]></title>
    <link href="http://pankona.github.io/blog/2016/10/25/golangtokyo/"/>
    <updated>2016-10-25T10:38:13+00:00</updated>
    <id>http://pankona.github.io/blog/2016/10/25/golangtokyo</id>
    <content type="html"><![CDATA[<p>2016.10.25 に六本木の森タワーメルカリさんにて、golang.tokyo #1 が行われました。</p>

<p><a href="http://golangtokyo.connpass.com/event/39965/">golang.tokyo #1 - connpass</a></p>

<p>以下に togetter まとまってます。<br>
<a href="http://togetter.com/li/1040839">メルカリ本社で開催されたGo言語勉強会 golang.tokyo #1 #golangtokyo - Togetterまとめ</a></p>

<p>参加者の方のまとめです。きれいにまとまっていて読み応えあります。<br>
<a href="http://godgarden.goat.me/3Hf9qTNO">Hello Gophers, Hello Golang.tokyo #1 - 365 simple life - g.o.a.t</a></p>

<p>本イベントにブログ枠にして参加させていただきましたので、<br>
その内容をレポートしていきます。</p>

<p><img src="/images/golang.tokyo-1/06.jpg" alt="golang.tokyo-1"><br>
図1. 入り口にていただいたステッカー。にゃってとごっふぁーくん。かわゆし。</p>

<h2 id="どういう主旨のイベントかと言うと">どういう主旨のイベントかと言うと</h2>

<p>いわゆる一般的な勉強会（？）でやるような、「数人の発表者が順繰りにスライドを用いて発表を行っていく」という体ではなく、パネルディスカッション形式。<br>
事前に収集された質問に対して、パネラーの方々が体験談を踏まえて回答をしていく、というのが主な内容。<br>
名だたる5名のパネラーさん達の詳細については、<a href="http://golangtokyo.connpass.com/event/39965/">connpass のイベントページ</a>を参照いただきたい。</p>

<p><img src="/images/golang.tokyo-1/05.jpg" alt="golang.tokyo-1"><br>
図2. 司会の tenntenn さん。</p>

<p><img src="/images/golang.tokyo-1/09.jpg" alt="golang.tokyo-1"><br>
図3. 向かって左正面。Songmu さん、大谷さん、kaneshin さん。</p>

<p><img src="/images/golang.tokyo-1/02.jpg" alt="golang.tokyo-1"><br>
図4. 向かって右正面。y_matsuwitter さん、辻さん。</p>

<p>写真遠いし真っ黒やんけ。しかし顔で勉強会するわけじゃないということでご容赦いただければと思います。</p>

<p>ちなみに開始当初から軽食、おビールなんかも振る舞われており、20時前開始という、<br>
おそらく夕飯食べてないであろう我々には、とても良い環境を提供いただいておりました。<br>
メルカリさん、いつもありがとうございます。</p>

<h2 id="本番中も質問が募集されていた">本番中も質問が募集されていた</h2>

<p>Google Apps のどの機能なのかちょっと失念してしまったのですが、<br>
本番中も質問を次々ポストできる形式になっていて＋既存の質問に対してイイねが可能になっていて、<br>
みんなが聞きたい質問が優先的に採用されてディスカッションされるというスキームでした。</p>

<p>あんまり見かけないやり方だなぁと思いつつ、視聴者参加型で面白い仕組みだと思いましたので、<br>
今後もやってくれたらいいなー、と感想を残しておきます。</p>

<h2 id="そして本編---質問と回答集">そして本編 - 質問と回答集</h2>

<p>前置きが長くなってしまいましたが、<br>
ここからは実際どのような質問がされ、どのように回答がなされたのかを載せていきます。<br>
※ 全部載せるとだだ長くなってしまうので、独断と偏見で端折りつつ、お送ります。</p>

<h3 id="q.-メンバーの-go-の教育はどうしてますか？">Q. メンバーの Go の教育はどうしてますか？</h3>

<p>Go に馴染みのないメンバーにどうやって Go を学んでもらうか？というトピック。</p>

<ul>
<li>辻さん &gt; 

<ul>
<li><a href="https://tour.golang.org/welcome/1">tour of go</a>、<a href="https://golang.org/doc/effective_go.html">effective go</a> あたりから入ってもらう。</li>
<li><a href="http://qiita.com/tenntenn/items/0e33a4959250d1a55045">初心者が見ると幸せになる場所　#golang</a></li>
<li>標準ライブラリのコード読んだり</li>
<li>ハマりどころの勉強会をしたり</li>
<li>あとは実践あるのみでソースレビュー

<ul>
<li>経験ある人をレビュアーにいれ、Go っぽくないコードを指摘したり</li>
</ul></li>
</ul></li>
</ul>

<p><img src="/images/golang.tokyo-1/04.jpg" alt="golang.tokyo-1"><br>
図5. そしてディスカッションが始まった</p>

<h3 id="q.-ideやデバッグはどうしているか">Q. IDEやデバッグはどうしているか</h3>

<p>Go でデバッガといえば <a href="https://github.com/derekparker/delve">delve</a> かと思ったが、思ったより使われていないのかなという印象。<br>
ちょこちょこテスト書いて動かしていけば、それほど難儀なデバッグが必要になることも少ないっていうことかしら？</p>

<ul>
<li>songmu さん &gt;

<ul>
<li>vim 使っている。メンバーが使っているのは結構バラバラ。</li>
<li>デバッグは主に print デバッグ。ちょっとコード書いてちょっとテスト書いて、みたいな。</li>
</ul></li>
<li>大谷さん &gt;

<ul>
<li>intellij idea。何人か vim。</li>
<li>デバッグは主に print デバッグ。実際に動かしながら。</li>
</ul></li>
</ul>

<h3 id="q.-コーディオング規約、レビューの指針、golint-に従うか、など。">Q. コーディオング規約、レビューの指針、golint に従うか、など。</h3>

<p>個人的には、従うと腹を決めて一度クリーンな状態になれば、あとはさほど苦ではないと思うが、はたして。</p>

<ul>
<li>辻さん &gt;

<ul>
<li>コーディング規約は <a href="https://github.com/golang/go/wiki/CodeReviewComments">CodeReviewComment</a> を基準にしている。</li>
<li>発火させるだけの単純なチャンネルには 空 struct を使う。</li>
<li>golint はベストエフォート。というのも、3rd party ツールがが生成するコードが golint に従ってない場合もあったりするようで…。

<ul>
<li>golint の対象を除外は grep -v で頑張る。</li>
</ul></li>
</ul></li>
<li>songmu さん &gt;

<ul>
<li>glint には従っている。従えば Go っぽい書き方ができてくると思う。</li>
</ul></li>
</ul>

<p><img src="/images/golang.tokyo-1/13.jpg" alt="golang.tokyo-1"><br>
図6.songmu さん回答中。</p>

<h3 id="q.-webフレームワークとテンプレートエンジンは？ormは？">Q. Webフレームワークとテンプレートエンジンは？ORMは？</h3>

<ul>
<li>辻さん &gt;

<ul>
<li>Echo。パフォーマンス重視の選択。</li>
<li>テンプレートエンジンは...標準のを使うのは結構ツラかった。フロントエンドは Go では書いてない。</li>
<li>DB のラッパーは <a href="https://github.com/Masterminds/squirrel">squirrel</a> を使っている。</li>
</ul></li>
<li>kaneshin さん &gt;

<ul>
<li>当初は <a href="https://revel.github.io/">Revel</a> を使っていたが、重量級な感じだったのでとっぱらいたかった。

<ul>
<li>後に <a href="https://github.com/gin-gonic/gin">Gin</a> で置き換えた。</li>
<li>router に <a href="https://github.com/gorilla/mux">gorrila/mux</a>。もしくは標準の http。</li>
</ul></li>
<li>テンプレートエンジンは標準のがツライ。フロントエンドは SPA を JS で作っている。</li>
<li>ORM は <a href="https://github.com/go-xorm/xorm">XORM</a>。 一部では <a href="https://github.com/jinzhu/gorm">gorm</a>。</li>
</ul></li>
</ul>

<h4 id="ところでフロントエンド事情は…">ところでフロントエンド事情は…</h4>

<ul>
<li>Go のテンプレートはツライ。</li>
<li>react とか angular とか使っちゃう。</li>
</ul>

<p>みな口々に「Go のテンプレートはツライ」と言っていたのが印象的でした…。</p>

<h3 id="q.-エラー処理どうしてますか？pkg/errors？-panic-は？">Q. エラー処理どうしてますか？pkg/errors？ panic は？</h3>

<ul>
<li>tenntenn さん &gt;

<ul>
<li>pkg/errors を主に使う。</li>
</ul></li>
<li>songmu さん &gt; 

<ul>
<li>panic はなるべくしないように作る。</li>
<li>goroutine の中でのエラーは、<a href="https://godoc.org/golang.org/x/sync/errgroup">sync.ErrorGroup</a>。</li>
</ul></li>
</ul>

<p><a href="https://godoc.org/golang.org/x/sync/errgroup">sync.ErrorGroup</a> の使い方について、<br>
ちょうど近頃<a href="http://deeeet.com/writing/2016/10/12/errgroup/">類似トピックの記事 - sync.ErrGroupで複数のgoroutineを制御する</a>をポストされていた deeeet さん (※ e は 4つ) からのコメント。</p>

<ul>
<li><a href="https://twitter.com/deeeet?lang=ja">deeeet さん</a> &gt;

<ul>
<li>ErrorGroup は便利。たくさんの処理があって、一個でも失敗したらご破産にしたいときに使う。</li>
</ul></li>
<li>kaneshin さん &gt;

<ul>
<li>error はエラーを上位レイヤーに伝搬させていく思想。</li>
<li>panic はしっかり使っていく派。起動直後に実行されて失敗したらどうにもならないものとかに対して。</li>
</ul></li>
</ul>

<p><img src="/images/golang.tokyo-1/08.jpg" alt="golang.tokyo-1"><br>
図7. deeeet さん (一番奥)。</p>

<h3 id="q.-git-に上がっているオススメの-go-で書かれたものは？">Q. Git に上がっているオススメの Go で書かれたものは？</h3>

<ul>
<li>kaneshin さん &gt;

<ul>
<li><a href="https://github.com/aws/aws-sdk-go">aws-sdk-go</a>。コードジェネレーション部が参考になる。</li>
<li>リクエストの作り方、リクエストのリトライの仕方。パッケージの構造なども。</li>
<li><a href="https://github.com/GoogleCloudPlatform/google-cloud-go">google-cloud-go</a> も参考になる。</li>
<li><a href="https://github.com/google/go-github">go-github</a> も。</li>
<li><a href="https://github.com/kaneshin/gate">kaneshin/gate</a>。Makefile の使い方がポイント。rake task 的な。</li>
</ul></li>
</ul>

<h3 id="q.-ロガーどうしている？">Q. ロガーどうしている？</h3>

<p>ロガーは <a href="https://github.com/Sirupsen/logrus">logrus</a> が定番といった空気でした。</p>

<ul>
<li>辻さん &gt;

<ul>
<li><a href="https://github.com/Sirupsen/logrus">logrus</a>。</li>
<li><a href="https://github.com/uber-go/zap">zap</a> というのもある。使い勝手が特殊な感じだが高速らしい。</li>
</ul></li>
<li>大谷さん &gt;

<ul>
<li>Web アプリではフレームワークのロガーをそのまま使う。</li>
<li>fluentd でひっかけて Big Query に投げる、等。</li>
</ul></li>
</ul>

<h3 id="q.-パッケージ分けどうしているか？パッケージ名、循環-import-問題は？">Q. パッケージ分けどうしているか？パッケージ名、循環 import 問題は？</h3>

<p>パッケージ分けは割と悩むポイントかと思いますが、はたして。</p>

<ul>
<li>松本さん &gt;

<ul>
<li>ひとつのサービス内のサブパッケージは2つか3つくらい。

<ul>
<li>設計上のドメイン軸で切っていく。ニュース記事・ユーザー・...</li>
<li>サブパッケージのサブパッケージ、みたいにこまかく切っていくことはあまりない。</li>
<li>リポジトリ一個一個を小さく保つようにしている。</li>
</ul></li>
</ul></li>
<li>tenntenn さん &gt;

<ul>
<li><a href="https://blog.golang.org/go1.5">internal package</a> というのもあるが、使うのをやめた。</li>
<li>別にそこまでしなくても、例えば private とかつけておいて区別さえできればよく、またこうやっとくといざというときにも使える。</li>
</ul></li>
</ul>

<p>あとは、以下のような意見も。</p>

<ul>
<li>Go っぽい感じを意識すると、あんまりパッケージを分けない？</li>
<li>microservice だと、microservice 同士で重複した処理が出てきたりする。パッケージ化して、service 同士で共有するか？

<ul>
<li>ロジックを共有すると、変更がお互いに影響してしまうので留意が必要。</li>
</ul></li>
</ul>

<h3 id="q.-テスト周り">Q. テスト周り</h3>

<ul>
<li>songmu さん &gt;

<ul>
<li>最初は標準を使っていたが、そのうち <a href="https://github.com/stretchr/testify">testify</a> を使うように。</li>
<li>lestrrat さんの mysql のテストに使うフレームワークを使ったりもしている。<a href="https://github.com/lestrrat/go-test-mysqld">lestrrat/go-test-mysqld</a>。</li>
</ul></li>
<li>kaneshin さん &gt;

<ul>
<li>CI 周りはツラくて常に戦っている。テスト全消化で 30 分かかったりしている。ツラミ。

<ul>
<li>今の気持ちとしては、DB 周りのテストは消したい。モック使いたい。</li>
<li>GAE にデプロイするものは、全て Pure Go で動くように設計している。テストしやすいように。</li>
</ul></li>
</ul></li>
<li>deeeet さん &gt; 

<ul>
<li>フレームワーク使わない派。フレームワークは mini DSL みたいなものだと思っていて、それを覚えるのはつらい。新規メンバーをげんなりさせる原因。</li>
<li>DB 周りのテストは、interface を使ってモックする。依存している部分を interface で分ける。</li>
<li>詳しくはここ → <a href="http://deeeet.com/writing/2016/10/25/go-interface-testing/">Golangにおけるinterfaceをつかったテスト技法 | SOTA</a></li>
</ul></li>
<li>songmu さん &gt;

<ul>
<li>DB のテストはモックせずに実際に DB を立ててやるべき派。</li>
<li>ロジック外の部分の問題も留意するべき。設定ファイルの関係で実際に DB にデータが入らなかったりすることも起こる。</li>
</ul></li>
</ul>

<h3 id="q.-デプロイまでのフロート工夫している点。ciとか。">Q. デプロイまでのフロート工夫している点。CIとか。</h3>

<ul>
<li>kaneshin さん &gt;

<ul>
<li>ansible。dynamic inventry を使っている。</li>
</ul></li>
</ul>

<h4 id="ところで、go-のビルドが遅くなる理由">ところで、Go のビルドが遅くなる理由</h4>

<p>Go のビルドは一般的には早いと言われているが、遅いとしたらそれは何故かと言うと…？</p>

<ul>
<li>import が煩雑である。依存が連なっていて、フルビルドがかかってしまう場合。</li>
</ul>

<p>これは例えば、A が B に依存していて、B が C に依存している、なんていうシチュエーションのとき、C を変更したら依存を遡って B も A もビルドが走ってしまう、ということが起こる模様。<br>
ちょうど C言語の include と同じような感じかな。ヘッダー変えたら全ビルド走っちゃうみたいな。<br>
個人的には Go でビルド速度にそれほど苦を感じたことはないが、とはいえ、留意されたしである。</p>

<h3 id="q.-pprof-を本番で使っている？モニタリングやチューニングは？">Q. pprof を本番で使っている？モニタリングやチューニングは？</h3>

<ul>
<li>大谷さん &gt;

<ul>
<li>pprof は本番では使ってない</li>
<li>モニタリングは zabbix で監視。プロセスが落ちたら復活させたり。</li>
<li>チューニング面では、文字列を + で繋がない。とか。</li>
</ul></li>
<li>松本さん &gt;

<ul>
<li>pprof ではなく、<a href="https://github.com/fukata/golang-stats-api-handler">golang-stats-api-handler</a> を使っている。</li>
<li><a href="https://www.datadoghq.com/">datadog</a> でリソース監視。プロセスが落ちたらすぐ再起動するようになっている。</li>
<li>個のチューニングではなく、横に並べられる設計でスケールできるようにしておく。札束で殴る。金の弾丸！</li>
</ul></li>
</ul>

<h2 id="その他の質問">その他の質問</h2>

<p>概ね、以上のトピックスでディスカッションが行われました。<br>
他にも、回答は得られませんでしたが、</p>

<p><img src="/images/golang.tokyo-1/11.jpg" alt="golang.tokyo-1"><br>
図8. Go言語プログラマの給料はいかほどか…</p>

<p>なんていう質問も出たり。<br>
ネタも挟みつつ、終始知見に溢れた有意義なディスカッションでありました。</p>

<h2 id="おわりに">おわりに</h2>

<p>運営の方々、登壇の方々、お疲れ様でした！</p>

<p>golang.tokyo #2 も計画されていると噂を聞きますので、<br>
興味を持たれた方、チェックしてみてはいかがでしょうか。<br>
Go 言語に興味さえあれば、参加して楽しいかと思います。</p>

<p><img src="/images/golang.tokyo-1/07.jpg" alt="golang.tokyo-1"><br>
図9. 戦利品としてTシャツいただきました！</p>
]]></content>
  </entry>
  
</feed>
